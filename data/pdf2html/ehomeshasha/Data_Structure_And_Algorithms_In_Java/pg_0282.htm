<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0282</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#008000;}
.ft2{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#000000;}
.ft3{font-style:normal;font-weight:bold;font-size:16px;font-family:Verdana;color:#000000;}
.ft4{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#000080;}
.ft5{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft6{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
.ft7{font-style:italic;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0282.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:391"><span class="ft0"> - 282 -</span></div>
<div style="position:absolute;top:81;left:90"><span class="ft1">External Storage,&quot;</span></div>
<div style="position:absolute;top:81;left:203"><span class="ft2"> where we discuss 2-3-4 trees.</span></div>
<div style="position:absolute;top:78;left:391"><span class="ft0"> </span></div>
<div style="position:absolute;top:81;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:98;left:79"><span class="ft3"> </span></div>
<div style="position:absolute;top:117;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:116;left:90"><span class="ft4"> Why Use Binary Trees.</span></div>
<div style="position:absolute;top:118;left:300"><span class="ft0"> </span></div>
<div style="position:absolute;top:117;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:122;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:142;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:179;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:157;left:90"><span class="ft5"> Why might you want to use a tree. Usually, bec ause it combines the advantages of two </span></div>
<div style="position:absolute;top:173;left:90"><span class="ft5">other structures: an ordered array and a linked list. You can search a tree quickly, as you </span></div>
<div style="position:absolute;top:189;left:90"><span class="ft5">can an ordered array, and you can also insert and delete items quickly, as you can with a </span></div>
<div style="position:absolute;top:205;left:90"><span class="ft5">linked list. Let's explore these topics a bit before delving into the details of trees.</span></div>
<div style="position:absolute;top:202;left:580"><span class="ft0"> </span></div>
<div style="position:absolute;top:179;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:206;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:225;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:241;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:240;left:90"><span class="ft6"> Slow Insertion in an Ordered Array</span></div>
<div style="position:absolute;top:242;left:400"><span class="ft0"> </span></div>
<div style="position:absolute;top:241;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:246;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:265;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:327;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:281;left:90"><span class="ft5"> Imagine an array in which all the elements are arranged in order; that is, an ordered </span></div>
<div style="position:absolute;top:297;left:90"><span class="ft5">array, such as we saw in</span></div>
<div style="position:absolute;top:297;left:242"><span class="ft1"> Chapter 3, &quot;Simple Sorting</span></div>
<div style="position:absolute;top:297;left:410"><span class="ft2">.&quot; As we learned, it's quick to search </span></div>
<div style="position:absolute;top:313;left:90"><span class="ft2">such an array for a particular value, using a binary search. You check in the center of the </span></div>
<div style="position:absolute;top:329;left:90"><span class="ft2">array; if the object you're looking for is greater than what you find there, you narrow your </span></div>
<div style="position:absolute;top:345;left:90"><span class="ft2">search to the top half of the array; if it's less, you narrow your search to the bottom half. </span></div>
<div style="position:absolute;top:361;left:90"><span class="ft2">Applying this process repeatedly finds the object in O(logN) time. It's also quick to iterate </span></div>
<div style="position:absolute;top:377;left:90"><span class="ft2">through an ordered array, visiting each object in sorted order.</span></div>
<div style="position:absolute;top:374;left:466"><span class="ft0"> </span></div>
<div style="position:absolute;top:327;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:377;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:396;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:442;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:412;left:90"><span class="ft5"> On the other hand, if you want to insert a new object into an ordered array, you first need </span></div>
<div style="position:absolute;top:428;left:90"><span class="ft5">to find where the object will go, and then move all the objects with greater keys up one </span></div>
<div style="position:absolute;top:444;left:90"><span class="ft5">space in the array to make room for it. These multiple moves are time consuming, </span></div>
<div style="position:absolute;top:460;left:90"><span class="ft5">requiring, on the average, moving half the items (N/2 moves). Deletion involves the same </span></div>
<div style="position:absolute;top:476;left:90"><span class="ft5">multimove operation, and is thus equally slow.</span></div>
<div style="position:absolute;top:473;left:374"><span class="ft0"> </span></div>
<div style="position:absolute;top:442;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:476;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:495;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:517;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:511;left:90"><span class="ft5"> If you're going to be doing a lot of insertions and deletions, an ordered array is a bad </span></div>
<div style="position:absolute;top:527;left:90"><span class="ft5">choice.</span></div>
<div style="position:absolute;top:524;left:134"><span class="ft0"> </span></div>
<div style="position:absolute;top:517;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:527;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:546;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:563;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:562;left:90"><span class="ft6"> Slow Searching in a Linked List</span></div>
<div style="position:absolute;top:564;left:371"><span class="ft0"> </span></div>
<div style="position:absolute;top:563;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:568;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:587;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:617;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:603;left:90"><span class="ft5"> On the other hand, as we saw in </span></div>
<div style="position:absolute;top:603;left:293"><span class="ft1">Chapter 7, &quot;Advanced Sorting</span></div>
<div style="position:absolute;top:603;left:477"><span class="ft2">,&quot; insertions and deletions </span></div>
<div style="position:absolute;top:619;left:90"><span class="ft2">are quick to perform on a linked list. They are accomplished simply by changing a few </span></div>
<div style="position:absolute;top:635;left:90"><span class="ft2">references. These operations require O(1) time (the fastest Big-O time).</span></div>
<div style="position:absolute;top:632;left:530"><span class="ft0"> </span></div>
<div style="position:absolute;top:617;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:635;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:654;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:700;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:670;left:90"><span class="ft5"> Unfortunately, however, finding a specified element in a linked list is not so easy. You </span></div>
<div style="position:absolute;top:686;left:90"><span class="ft5">must start at the beginning of the list and visit each element until you find the one you're </span></div>
<div style="position:absolute;top:702;left:90"><span class="ft5">looking for. Thus you will need to visit an average of N/2 objects, comparing each one's </span></div>
<div style="position:absolute;top:718;left:90"><span class="ft5">key with the desired value. This is slow, requiring O(N) time. (Notice that times </span></div>
<div style="position:absolute;top:734;left:90"><span class="ft5">considered fast for a sort are slow for data structure operations.)</span></div>
<div style="position:absolute;top:731;left:485"><span class="ft0"> </span></div>
<div style="position:absolute;top:700;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:734;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:753;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:807;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:769;left:90"><span class="ft5"> You might think you could speed things up by using an ordered linked list, in which the </span></div>
<div style="position:absolute;top:785;left:90"><span class="ft5">elements were arranged in order, but this doesn't help. You still must start at the </span></div>
<div style="position:absolute;top:801;left:90"><span class="ft5">beginning and visit the elements in order, because there's no way to access a given </span></div>
<div style="position:absolute;top:817;left:90"><span class="ft5">element without following the chain of references to it. (Of course, in an ordered list it's </span></div>
<div style="position:absolute;top:833;left:90"><span class="ft5">much quicker to visit the nodes in order than it is in a non-ordered list, but that doesn't </span></div>
<div style="position:absolute;top:849;left:90"><span class="ft5">help to find an arbitrary object.)</span></div>
<div style="position:absolute;top:846;left:282"><span class="ft0"> </span></div>
<div style="position:absolute;top:807;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:849;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:868;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:885;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:884;left:90"><span class="ft6"> Trees to the Rescue</span></div>
<div style="position:absolute;top:886;left:268"><span class="ft0"> </span></div>
<div style="position:absolute;top:885;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:890;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:909;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:939;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:925;left:90"><span class="ft5"> It would be nice if there were a data structure with the quick insertion and deletion of a </span></div>
<div style="position:absolute;top:941;left:90"><span class="ft5">linked list, and also the quick searching of an ordered array. Trees provide both these </span></div>
<div style="position:absolute;top:957;left:90"><span class="ft5">characteristics, and are also one of the most interesting data structures.</span></div>
<div style="position:absolute;top:954;left:530"><span class="ft0"> </span></div>
<div style="position:absolute;top:939;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:957;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:976;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:993;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:992;left:90"><span class="ft6"> What Is a Tree.</span></div>
<div style="position:absolute;top:994;left:229"><span class="ft0"> </span></div>
<div style="position:absolute;top:993;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:998;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1017;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1039;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1033;left:90"><span class="ft5"> We'll be mostly interested in a particular kind of tree called a binary tree, but let's start by </span></div>
<div style="position:absolute;top:1049;left:90"><span class="ft5">discussing trees in general before moving on to the specifics of binary trees.</span></div>
<div style="position:absolute;top:1046;left:557"><span class="ft0"> </span></div>
<div style="position:absolute;top:1039;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1049;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1068;left:80"><span class="ft0"> </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>