<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0285</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft2{font-style:normal;font-weight:bold;font-size:13px;font-family:Arial;color:#010100;}
.ft3{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#000000;}
.ft4{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#008000;}
.ft5{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
.ft6{font-style:normal;font-weight:bold;font-size:16px;font-family:Arial;color:#010100;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0285.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:391"><span class="ft0"> - 285 -</span></div>
<div style="position:absolute;top:81;left:90"><span class="ft1">subtrees may also be unbalanced.</span></div>
<div style="position:absolute;top:78;left:302"><span class="ft0"> </span></div>
<div style="position:absolute;top:81;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:100;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:211;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:310;left:344"><span class="ft0">  </span></div>
<div style="position:absolute;top:211;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:310;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:329;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:345;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:345;left:136"><span class="ft2"> Figure 8.6:  An unbalanced tree (with an unbalanced subtree)</span></div>
<div style="position:absolute;top:342;left:518"><span class="ft0"> </span></div>
<div style="position:absolute;top:345;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:368;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:366;left:136"><span class="ft3">  </span></div>
<div style="position:absolute;top:366;left:640"><span class="ft3">  </span></div>
<div style="position:absolute;top:368;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:387;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:464;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:403;left:90"><span class="ft1"> Trees become unbalanced because of the order in which the data items are inserted. If </span></div>
<div style="position:absolute;top:419;left:90"><span class="ft1">these key values are inserted randomly, the tree will be more or less balanced. However, </span></div>
<div style="position:absolute;top:435;left:90"><span class="ft1">if an ascending sequence (like 11, 18, 33, 42, 65, and so on) or a descending sequence </span></div>
<div style="position:absolute;top:451;left:90"><span class="ft1">is generated, all the values will be right children (if ascending) or left children (if </span></div>
<div style="position:absolute;top:467;left:90"><span class="ft1">descending) and the tree will be unbalanced. The key values in the Workshop applet are </span></div>
<div style="position:absolute;top:482;left:90"><span class="ft1">generated randomly, but of course some short ascending or descending sequences will </span></div>
<div style="position:absolute;top:498;left:90"><span class="ft1">be created anyway, which will lead to local imbalances. When you learn how to insert </span></div>
<div style="position:absolute;top:514;left:90"><span class="ft1">items into the tree in the Workshop applet you can try building up a tree by inserting such </span></div>
<div style="position:absolute;top:530;left:90"><span class="ft1">an ordered sequence of items and see what happens.</span></div>
<div style="position:absolute;top:527;left:421"><span class="ft0"> </span></div>
<div style="position:absolute;top:464;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:531;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:550;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:587;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:566;left:90"><span class="ft1"> If you ask for a large number of nodes when you use Fill to create a tree, you may not get </span></div>
<div style="position:absolute;top:582;left:90"><span class="ft1">as many nodes as you requested. Depending on how unbalanced the tree becomes, </span></div>
<div style="position:absolute;top:597;left:90"><span class="ft1">some branches may not be able to hold a full number of nodes. This is because the </span></div>
<div style="position:absolute;top:613;left:90"><span class="ft1">depth of the applet's tree is limited to five; the problem would not arise in a real tree.</span></div>
<div style="position:absolute;top:610;left:605"><span class="ft0"> </span></div>
<div style="position:absolute;top:587;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:614;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:633;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:694;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:649;left:90"><span class="ft1"> If a tree is created by data items whose key values arrive in random order, the problem of </span></div>
<div style="position:absolute;top:665;left:90"><span class="ft1">unbalanced trees may not be too much of a problem for larger trees, because the </span></div>
<div style="position:absolute;top:681;left:90"><span class="ft1">chances of a long run of numbers in sequence is small. But key values can arrive in strict </span></div>
<div style="position:absolute;top:697;left:90"><span class="ft1">sequence; for example, when a data-entry person arranges a stack of personnel files into </span></div>
<div style="position:absolute;top:712;left:90"><span class="ft1">order of ascending employee number before entering the data. When this happens, tree </span></div>
<div style="position:absolute;top:728;left:90"><span class="ft1">efficiency can be seriously degraded. We'll discuss unbalanced trees and what to do </span></div>
<div style="position:absolute;top:744;left:90"><span class="ft1">about them in </span></div>
<div style="position:absolute;top:744;left:178"><span class="ft4">Chapter 9, &quot;Red-Black Trees.&quot;</span></div>
<div style="position:absolute;top:741;left:364"><span class="ft0"> </span></div>
<div style="position:absolute;top:694;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:745;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:764;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:780;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:779;left:90"><span class="ft5"> Representing the Tree in Java Code</span></div>
<div style="position:absolute;top:781;left:409"><span class="ft0"> </span></div>
<div style="position:absolute;top:780;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:785;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:804;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:842;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:820;left:90"><span class="ft1"> Let's see how we might implement a binary tree in Java. As with other data structures, </span></div>
<div style="position:absolute;top:836;left:90"><span class="ft1">there are several approaches to representing a tree in the computer's memory. The most </span></div>
<div style="position:absolute;top:852;left:90"><span class="ft1">common is to store the nodes at unrelated locations in memory and connect them using </span></div>
<div style="position:absolute;top:868;left:90"><span class="ft1">references in each node that point to its children.</span></div>
<div style="position:absolute;top:865;left:390"><span class="ft0"> </span></div>
<div style="position:absolute;top:842;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:868;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:887;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:925;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:903;left:90"><span class="ft1"> It's also possible to represent a tree in memory as an array, with nodes in specific </span></div>
<div style="position:absolute;top:919;left:90"><span class="ft1">positions stored in corresponding positions in the array. We'll return to this possibility at </span></div>
<div style="position:absolute;top:935;left:90"><span class="ft1">the end of this chapter. For our sample Java code we'll use the approach of connecting </span></div>
<div style="position:absolute;top:951;left:90"><span class="ft1">the nodes using references.</span></div>
<div style="position:absolute;top:948;left:262"><span class="ft0"> </span></div>
<div style="position:absolute;top:925;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:951;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:970;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1000;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:986;left:90"><span class="ft1"> As we discuss individual operations we'll show code fragments pertaining to that </span></div>
<div style="position:absolute;top:1002;left:90"><span class="ft1">operation. The complete program from which these fragments are extracted can be seen </span></div>
<div style="position:absolute;top:1018;left:90"><span class="ft1">toward the end of this chapter in </span></div>
<div style="position:absolute;top:1018;left:292"><span class="ft4">Listing 8.1</span></div>
<div style="position:absolute;top:1018;left:355"><span class="ft1">.</span></div>
<div style="position:absolute;top:1015;left:359"><span class="ft0"> </span></div>
<div style="position:absolute;top:1000;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1018;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1038;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1053;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1053;left:90"><span class="ft6"> The Node Class</span></div>
<div style="position:absolute;top:1053;left:215"><span class="ft0"> </span></div>
<div style="position:absolute;top:1053;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1057;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1076;left:80"><span class="ft0"> </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>