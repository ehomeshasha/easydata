<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0511</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft2{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#000000;}
.ft3{font-style:normal;font-weight:bold;font-size:13px;font-family:Arial;color:#010100;}
.ft4{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#000000;}
.ft5{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
.ft6{font-style:normal;font-weight:bold;font-size:16px;font-family:Arial;color:#010100;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0511.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:391"><span class="ft0"> - 511 -</span></div>
<div style="position:absolute;top:81;left:90"><span class="ft1">key values. This works for general-purpose database programs (as opposed to </span></div>
<div style="position:absolute;top:97;left:90"><span class="ft1">specialized structures such as stacks, which allow access to only certain data items).</span></div>
<div style="position:absolute;top:94;left:611"><span class="ft0"> </span></div>
<div style="position:absolute;top:97;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:116;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:153;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:132;left:90"><span class="ft1"> Which of these general-purpose data structures is appropriate for a given problem. </span></div>
<div style="position:absolute;top:148;left:90"><span class="ft1">Figure 15.1</span></div>
<div style="position:absolute;top:148;left:161"><span class="ft2"> shows a first approximation to this question. However, there are many factors </span></div>
<div style="position:absolute;top:164;left:90"><span class="ft2">besides those shown in the figure. For more detail, we'll explore some general </span></div>
<div style="position:absolute;top:180;left:90"><span class="ft2">considerations first, and then zero in on the individual structures.</span></div>
<div style="position:absolute;top:177;left:486"><span class="ft0"> </span></div>
<div style="position:absolute;top:153;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:180;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:199;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:320;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:429;left:339"><span class="ft0">  </span></div>
<div style="position:absolute;top:320;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:429;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:448;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:464;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:464;left:136"><span class="ft3"> Figure 15.1:  Relationship of general-purpose data structures</span></div>
<div style="position:absolute;top:461;left:515"><span class="ft0">  </span></div>
<div style="position:absolute;top:464;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:486;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:485;left:136"><span class="ft4">  </span></div>
<div style="position:absolute;top:485;left:640"><span class="ft4">  </span></div>
<div style="position:absolute;top:487;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:506;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:522;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:521;left:90"><span class="ft5"> Speed and Algorithms</span></div>
<div style="position:absolute;top:523;left:289"><span class="ft0"> </span></div>
<div style="position:absolute;top:522;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:527;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:546;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:568;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:562;left:90"><span class="ft1"> The general-purpose data structures can be roughly arranged in terms of speed: Arrays </span></div>
<div style="position:absolute;top:578;left:90"><span class="ft1">and linked lists are slow, trees are fairly fast, and hash tables are very fast.</span></div>
<div style="position:absolute;top:575;left:549"><span class="ft0"> </span></div>
<div style="position:absolute;top:568;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:578;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:597;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:651;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:613;left:90"><span class="ft1"> However, don't draw the conclusion from this figure that it's always best to use the fastest </span></div>
<div style="position:absolute;top:629;left:90"><span class="ft1">structures. There's a penalty for using them. First, they are¡ªin varying degrees¡ªmore </span></div>
<div style="position:absolute;top:645;left:90"><span class="ft1">complex to program than the array and linked list. Also, hash tables require you to know </span></div>
<div style="position:absolute;top:661;left:90"><span class="ft1">in advance about how much data can be stored, and they don't use memory very </span></div>
<div style="position:absolute;top:677;left:90"><span class="ft1">efficiently. Ordinary binary trees will revert to slow O(N) operation for ordered data, and </span></div>
<div style="position:absolute;top:693;left:90"><span class="ft1">balanced trees, which avoid this problem, are difficult to program.</span></div>
<div style="position:absolute;top:690;left:491"><span class="ft0"> </span></div>
<div style="position:absolute;top:651;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:693;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:712;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:728;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:728;left:90"><span class="ft6"> Computers Grow Faster Every Year</span></div>
<div style="position:absolute;top:728;left:371"><span class="ft0"> </span></div>
<div style="position:absolute;top:728;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:732;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:751;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:813;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:767;left:90"><span class="ft1"> The fast structures come with penalties, and another development makes the slow </span></div>
<div style="position:absolute;top:783;left:90"><span class="ft1">structures more attractive. Every year there's an increase in the CPU and memory-</span></div>
<div style="position:absolute;top:799;left:90"><span class="ft1">access speed of the latest computers. Moore's Law (postulated by Gordon Moore in </span></div>
<div style="position:absolute;top:815;left:90"><span class="ft1">1965) specifies that CPU performance will double every 18 months. This adds up to an </span></div>
<div style="position:absolute;top:831;left:90"><span class="ft1">astonishing difference in performance between the earliest computers and those </span></div>
<div style="position:absolute;top:847;left:90"><span class="ft1">available today, and there's no reason to think this increase will slow down any time </span></div>
<div style="position:absolute;top:863;left:90"><span class="ft1">soon.</span></div>
<div style="position:absolute;top:860;left:124"><span class="ft0"> </span></div>
<div style="position:absolute;top:813;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:863;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:882;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:928;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:898;left:90"><span class="ft1"> Suppose a computer a few years ago handled an array of 100 objects in acceptable time. </span></div>
<div style="position:absolute;top:914;left:90"><span class="ft1">Now, computers are 100 times faster, so an array with 10,000 objects can run at the </span></div>
<div style="position:absolute;top:930;left:90"><span class="ft1">same speed. Many writers provide estimates of the maximum size you can make a data </span></div>
<div style="position:absolute;top:946;left:90"><span class="ft1">structure before it becomes too slow. Don't trust these estimates (including those in this </span></div>
<div style="position:absolute;top:962;left:90"><span class="ft1">book). Today's estimate doesn't apply to tomorrow.</span></div>
<div style="position:absolute;top:959;left:404"><span class="ft0"> </span></div>
<div style="position:absolute;top:928;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:962;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:981;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1027;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:997;left:90"><span class="ft1"> Instead, start by considering the simple data structures. Unless it's obvious they'll be too </span></div>
<div style="position:absolute;top:1013;left:90"><span class="ft1">slow, code a simple version of an array or linked list and see what happens. If it runs in </span></div>
<div style="position:absolute;top:1029;left:90"><span class="ft1">acceptable time, look no further. Why slave away on a balanced tree, when no one would </span></div>
<div style="position:absolute;top:1045;left:90"><span class="ft1">ever notice if you used an array instead. Even if you must deal with thousands or tens of </span></div>
<div style="position:absolute;top:1061;left:90"><span class="ft1">thousands of items, it's still worthwhile to see how well an array or linked list will handle </span></div>
<div style="position:absolute;top:1027;left:640"><span class="ft0">  </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>