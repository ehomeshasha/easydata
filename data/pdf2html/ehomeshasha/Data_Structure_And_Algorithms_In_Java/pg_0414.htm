<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0414</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft2{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
.ft3{font-style:italic;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft4{font-style:normal;font-weight:bold;font-size:13px;font-family:Arial;color:#010100;}
.ft5{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#000000;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0414.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:391"><span class="ft0"> - 414 -</span></div>
<div style="position:absolute;top:81;left:90"><span class="ft1">(disk-based) storage. Let's look briefly at the use of hash tables for external storage.</span></div>
<div style="position:absolute;top:78;left:606"><span class="ft0"> </span></div>
<div style="position:absolute;top:81;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:100;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:138;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:116;left:90"><span class="ft1"> Recall from the last chapter that a disk file is divided into blocks containing many records, </span></div>
<div style="position:absolute;top:132;left:90"><span class="ft1">and that the time to access a block is much larger than any internal processing on data in </span></div>
<div style="position:absolute;top:148;left:90"><span class="ft1">main memory. For these reasons the overriding consideration in devising an external </span></div>
<div style="position:absolute;top:164;left:90"><span class="ft1">storage strategy is minimizing the number of block accesses.</span></div>
<div style="position:absolute;top:161;left:465"><span class="ft0"> </span></div>
<div style="position:absolute;top:138;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:164;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:183;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:213;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:199;left:90"><span class="ft1"> On the other hand, external storage is not expensive per byte, so it may be acceptable to </span></div>
<div style="position:absolute;top:215;left:90"><span class="ft1">use large amounts of it, more than is strictly required to hold the data, if by so doing we </span></div>
<div style="position:absolute;top:231;left:90"><span class="ft1">can speed up access time. This is possible using hash tables.</span></div>
<div style="position:absolute;top:228;left:469"><span class="ft0"> </span></div>
<div style="position:absolute;top:213;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:231;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:250;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:266;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:265;left:90"><span class="ft2"> Table of File Pointers</span></div>
<div style="position:absolute;top:267;left:280"><span class="ft0"> </span></div>
<div style="position:absolute;top:266;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:272;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:291;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:344;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:307;left:90"><span class="ft1"> The central feature in external hashing is a hash table containing block numbers, which </span></div>
<div style="position:absolute;top:322;left:90"><span class="ft1">refer to blocks in external storage. The hash table is sometimes called an index (in the </span></div>
<div style="position:absolute;top:338;left:90"><span class="ft1">sense of a book's index). It can be stored in main memory, or, if it is too large, stored </span></div>
<div style="position:absolute;top:354;left:90"><span class="ft1">externally on disk, with only part of it being read into main memory at a time. Even if it fits </span></div>
<div style="position:absolute;top:370;left:90"><span class="ft1">entirely in main memory, a copy will probably be maintained on the disk, and read into </span></div>
<div style="position:absolute;top:386;left:90"><span class="ft1">memory when the file is opened.</span></div>
<div style="position:absolute;top:383;left:290"><span class="ft0"> </span></div>
<div style="position:absolute;top:344;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:387;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:406;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:422;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:421;left:90"><span class="ft2"> Non-Full Blocks</span></div>
<div style="position:absolute;top:423;left:233"><span class="ft0"> </span></div>
<div style="position:absolute;top:422;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:427;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:446;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:476;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:462;left:90"><span class="ft1"> Let's reuse the example from the last chapter in which the block size is 8,192 bytes, and </span></div>
<div style="position:absolute;top:478;left:90"><span class="ft1">a record is 512 bytes. Thus a block can hold 16 records. Every entry in the hash table </span></div>
<div style="position:absolute;top:494;left:90"><span class="ft1">points to one of these blocks. Let's say there are 100 blocks in a particular file.</span></div>
<div style="position:absolute;top:491;left:571"><span class="ft0"> </span></div>
<div style="position:absolute;top:476;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:494;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:513;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:535;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:529;left:90"><span class="ft1"> The index (hash table) in main memory holds pointers to the file blocks, which start at 0 </span></div>
<div style="position:absolute;top:545;left:90"><span class="ft1">at the beginning of the file and run up to 99.</span></div>
<div style="position:absolute;top:542;left:358"><span class="ft0"> </span></div>
<div style="position:absolute;top:535;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:545;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:565;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:594;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:580;left:90"><span class="ft1"> In external hashing it's important that blocks don't become full. Thus we might store an </span></div>
<div style="position:absolute;top:596;left:90"><span class="ft1">average of 8 records per block. Some blocks would have more records, and some fewer. </span></div>
<div style="position:absolute;top:612;left:90"><span class="ft1">There would be about 800 records in the file. This arrangement is shown in Figure 11.15.</span></div>
<div style="position:absolute;top:609;left:636"><span class="ft0">  </span></div>
<div style="position:absolute;top:613;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:632;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:764;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:886;left:402"><span class="ft0">  </span></div>
<div style="position:absolute;top:764;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:886;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:905;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:920;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:921;left:136"><span class="ft4"> Figure 11.15:  External hashing</span></div>
<div style="position:absolute;top:918;left:333"><span class="ft0"> </span></div>
<div style="position:absolute;top:920;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:943;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:941;left:136"><span class="ft5">  </span></div>
<div style="position:absolute;top:941;left:640"><span class="ft5">  </span></div>
<div style="position:absolute;top:943;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:962;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:992;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:978;left:90"><span class="ft1"> A</span></div>
<div style="position:absolute;top:978;left:100"><span class="ft1">ll records with keys that hash to the same value are located in the same block. To find a </span></div>
<div style="position:absolute;top:994;left:90"><span class="ft1">record with a particular key, the search algorithm hashes the key, uses the hash value as </span></div>
<div style="position:absolute;top:1010;left:90"><span class="ft1">an index to the hash table, gets the block number at that index, and reads the block.</span></div>
<div style="position:absolute;top:1007;left:606"><span class="ft0">   </span></div>
<div style="position:absolute;top:1010;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1029;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1051;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1045;left:90"><span class="ft1"> This is an efficient process because only one block access is necessary to locate a given </span></div>
<div style="position:absolute;top:1061;left:90"><span class="ft1">item. The downside is that considerable disk space is wasted because the blocks are, by </span></div>
<div style="position:absolute;top:1051;left:640"><span class="ft0">  </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>