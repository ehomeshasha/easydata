<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0090</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#000080;}
.ft2{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft3{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#008000;}
.ft4{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#000000;}
.ft5{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0090.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:395"><span class="ft0"> - 90 -</span></div>
<div style="position:absolute;top:80;left:79"><span class="ft1">Stacks</span></div>
<div style="position:absolute;top:82;left:139"><span class="ft0"> </span></div>
<div style="position:absolute;top:81;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:86;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:105;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:159;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:121;left:90"><span class="ft2"> A stack allows access to only one data item: the last item inserted. If you remove this </span></div>
<div style="position:absolute;top:137;left:90"><span class="ft2">item, then you can access the next-to-last item inserted, and so on. This is a useful </span></div>
<div style="position:absolute;top:153;left:90"><span class="ft2">capability in many programming situations. In this section, we'll see how a stack can be </span></div>
<div style="position:absolute;top:169;left:90"><span class="ft2">used to check whether parentheses, braces, and brackets are balanced in a computer </span></div>
<div style="position:absolute;top:185;left:90"><span class="ft2">program source file. At the end of this chapter, we'll see a stack playing a vital role in </span></div>
<div style="position:absolute;top:201;left:90"><span class="ft2">parsing (analyzing) arithmetic expressions such as 3*(4+5).</span></div>
<div style="position:absolute;top:198;left:455"><span class="ft0"> </span></div>
<div style="position:absolute;top:159;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:201;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:220;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:258;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:236;left:90"><span class="ft2"> A stack is also a handy aid for algorithms applied to certain complex data structures. In </span></div>
<div style="position:absolute;top:252;left:90"><span class="ft3">Chapter 8, &quot;Binary Trees,</span></div>
<div style="position:absolute;top:252;left:247"><span class="ft4">&quot; we'll see it used to help traverse the nodes of a tree. In </span></div>
<div style="position:absolute;top:268;left:90"><span class="ft3">Chapter 13, &quot;Graphs,&quot;</span></div>
<div style="position:absolute;top:268;left:226"><span class="ft4"> we'll apply it to searching the vertices of a graph (a technique that </span></div>
<div style="position:absolute;top:284;left:90"><span class="ft4">can be used to find your way out of a maze).</span></div>
<div style="position:absolute;top:281;left:364"><span class="ft0"> </span></div>
<div style="position:absolute;top:258;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:284;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:303;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:333;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:319;left:90"><span class="ft2"> Most microprocessors use a stack-based architecture. When a method is called, its </span></div>
<div style="position:absolute;top:335;left:90"><span class="ft2">return address and arguments are pushed onto a stack, and when it returns they're </span></div>
<div style="position:absolute;top:351;left:90"><span class="ft2">popped off. The stack operations are built into the microprocessor.</span></div>
<div style="position:absolute;top:348;left:498"><span class="ft0"> </span></div>
<div style="position:absolute;top:333;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:351;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:370;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:408;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:386;left:90"><span class="ft2"> Some older pocket calculators used a stack-based architecture. Instead of entering </span></div>
<div style="position:absolute;top:402;left:90"><span class="ft2">arithmetic expressions using parentheses, you pushed intermediate results onto a stack. </span></div>
<div style="position:absolute;top:418;left:90"><span class="ft2">We'll learn more about this approach when we discuss parsing arithmetic expressions in </span></div>
<div style="position:absolute;top:434;left:90"><span class="ft2">the </span></div>
<div style="position:absolute;top:434;left:113"><span class="ft3">last section</span></div>
<div style="position:absolute;top:434;left:183"><span class="ft2"> in this chapter.</span></div>
<div style="position:absolute;top:431;left:277"><span class="ft0"> </span></div>
<div style="position:absolute;top:408;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:434;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:454;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:470;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:469;left:90"><span class="ft5"> The Postal Analogy</span></div>
<div style="position:absolute;top:471;left:264"><span class="ft0"> </span></div>
<div style="position:absolute;top:470;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:475;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:494;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:564;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:510;left:90"><span class="ft2"> To understand the idea of a stack, consider an analogy provided by the U. S. Postal </span></div>
<div style="position:absolute;top:526;left:90"><span class="ft2">Service. Many people, when they get their mail, toss it onto a stack on the hall table or </span></div>
<div style="position:absolute;top:542;left:90"><span class="ft2">into an &quot;in&quot; basket at work. Then, when they have a spare moment, they process the </span></div>
<div style="position:absolute;top:558;left:90"><span class="ft2">accumulated mail from the top down. First they open the letter on the top of the stack and </span></div>
<div style="position:absolute;top:574;left:90"><span class="ft2">take appropriate action¡ªpaying the bill, throwing it away, or whatever. When the first </span></div>
<div style="position:absolute;top:590;left:90"><span class="ft2">letter has been disposed of, they examine the next letter down, which is now the top of </span></div>
<div style="position:absolute;top:606;left:90"><span class="ft2">the stack, and deal with that. Eventually they work their way down to the letter on the </span></div>
<div style="position:absolute;top:622;left:90"><span class="ft2">bottom of the stack (which is now the top). Figure 4.1 shows a stack of mail.</span></div>
<div style="position:absolute;top:619;left:556"><span class="ft0"> </span></div>
<div style="position:absolute;top:564;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:622;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:641;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:671;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:657;left:90"><span class="ft2"> This &quot;do the top one first&quot; approach works all right as long as you can easily process all </span></div>
<div style="position:absolute;top:673;left:90"><span class="ft2">the mail in a reasonable time. If you can't, there's the danger that letters on the bottom of </span></div>
<div style="position:absolute;top:689;left:90"><span class="ft2">the stack won't be examined for months, and the bills they contain will become overdue.</span></div>
<div style="position:absolute;top:686;left:630"><span class="ft0">   </span></div>
<div style="position:absolute;top:689;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:708;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:762;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:724;left:90"><span class="ft2"> Of course, many people don't rigorously follow this top-to-bottom approach. They may, </span></div>
<div style="position:absolute;top:740;left:90"><span class="ft2">for example, take the mail off the bottom of the stack, so as to process the oldest letter </span></div>
<div style="position:absolute;top:756;left:90"><span class="ft2">first. Or they might shuffle through the mail before they begin processing it and put </span></div>
<div style="position:absolute;top:772;left:90"><span class="ft2">higher-priority letters on top. In these cases, their mail system is no longer a stack in the </span></div>
<div style="position:absolute;top:788;left:90"><span class="ft2">computer-science sense of the word. If they take letters off the bottom, it's a queue; and if </span></div>
<div style="position:absolute;top:804;left:90"><span class="ft2">they prioritize it, it's a priority queue. We'll look at these possibilities later.</span></div>
<div style="position:absolute;top:801;left:537"><span class="ft0"> </span></div>
<div style="position:absolute;top:762;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:804;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:823;left:80"><span class="ft0"> </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>