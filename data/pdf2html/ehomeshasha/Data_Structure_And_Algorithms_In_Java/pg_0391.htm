<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0391</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft2{font-style:normal;font-weight:bold;font-size:16px;font-family:Arial;color:#010100;}
.ft3{font-style:italic;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft4{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
.ft5{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#010100;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0391.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:391"><span class="ft0"> - 391 -</span></div>
<div style="position:absolute;top:81;left:90"><span class="ft1">algorithm can find it. Often it's located at the initial cell, or the one adjacent to it. If you're </span></div>
<div style="position:absolute;top:97;left:90"><span class="ft1">patient, however, you'll find a key that requires three or four steps, and you'll see the step </span></div>
<div style="position:absolute;top:112;left:90"><span class="ft1">size lengthen for each step. You can also use Find to search for a nonexistent key; this </span></div>
<div style="position:absolute;top:128;left:90"><span class="ft1">search continues until an empty cell is encountered.</span></div>
<div style="position:absolute;top:125;left:409"><span class="ft0"> </span></div>
<div style="position:absolute;top:129;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:148;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:185;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:164;left:90"><span class="ft1"> Important: Always make the array size a prime number. Use 59 instead of 60, for </span></div>
<div style="position:absolute;top:180;left:90"><span class="ft1">example. (Other primes less than 60 are 53, 47, 43, 41, 37, 31, 29, 23, 19, 17, 13, 11, 7, </span></div>
<div style="position:absolute;top:196;left:90"><span class="ft1">5, 3, and 2.) If the array size is not prime, an endless sequence of steps may occur </span></div>
<div style="position:absolute;top:212;left:90"><span class="ft1">during a probe. If this happens during a Fill operation, the applet will be paralyzed.</span></div>
<div style="position:absolute;top:209;left:594"><span class="ft0"> </span></div>
<div style="position:absolute;top:185;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:212;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:231;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:246;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:246;left:90"><span class="ft2"> The Problem with Quadratic Probes</span></div>
<div style="position:absolute;top:246;left:373"><span class="ft0"> </span></div>
<div style="position:absolute;top:246;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:250;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:269;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:307;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:285;left:90"><span class="ft1"> Quadratic probes eliminate the clustering problem we saw with the linear probe, which is </span></div>
<div style="position:absolute;top:301;left:90"><span class="ft1">called primary clustering. However, quadratic probes suffer from a different and more </span></div>
<div style="position:absolute;top:317;left:90"><span class="ft1">subtle clustering problem. This occurs because all the keys that hash to a particular cell </span></div>
<div style="position:absolute;top:333;left:90"><span class="ft1">follow the same sequence in trying to find a vacant space.</span></div>
<div style="position:absolute;top:330;left:446"><span class="ft0"> </span></div>
<div style="position:absolute;top:307;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:333;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:352;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:390;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:368;left:90"><span class="ft1"> Let's say 184, 302, 420, 544 all hash to 7 and are inserted in this order. Then 302 will </span></div>
<div style="position:absolute;top:384;left:90"><span class="ft1">require a one-step probe, 420 will require a 2-step probe, and 544 will require a 3-step </span></div>
<div style="position:absolute;top:400;left:90"><span class="ft1">probe. Each additional item with a key that hashes to 7 will require a longer probe. This </span></div>
<div style="position:absolute;top:416;left:90"><span class="ft1">phenomenon is called secondary clustering.</span></div>
<div style="position:absolute;top:413;left:360"><span class="ft0"> </span></div>
<div style="position:absolute;top:390;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:416;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:435;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:457;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:451;left:90"><span class="ft1"> Secondary clustering is not a serious problem, but quadratic probing is not often used </span></div>
<div style="position:absolute;top:467;left:90"><span class="ft1">because there's a slightly better solution.</span></div>
<div style="position:absolute;top:464;left:341"><span class="ft0"> </span></div>
<div style="position:absolute;top:457;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:467;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:486;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:503;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:502;left:90"><span class="ft4"> Double Hashing</span></div>
<div style="position:absolute;top:504;left:233"><span class="ft0"> </span></div>
<div style="position:absolute;top:503;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:508;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:527;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:565;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:543;left:90"><span class="ft1"> To eliminate secondary clustering as well as primary clustering, another approach can be </span></div>
<div style="position:absolute;top:559;left:90"><span class="ft1">used: double hashing (sometimes called rehashing). Secondary clustering occurs </span></div>
<div style="position:absolute;top:575;left:90"><span class="ft1">because the algorithm that generates the sequence of steps in the quadratic probe </span></div>
<div style="position:absolute;top:591;left:90"><span class="ft1">always generates the same steps: 1, 4, 9, 16, and so on.</span></div>
<div style="position:absolute;top:588;left:438"><span class="ft0"> </span></div>
<div style="position:absolute;top:565;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:591;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:610;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:640;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:626;left:90"><span class="ft1"> What we need is a way to generate probe sequences that depend on the key instead of </span></div>
<div style="position:absolute;top:642;left:90"><span class="ft1">being the same for every key. Then numbers with different keys that hash to the same </span></div>
<div style="position:absolute;top:658;left:90"><span class="ft1">index will use different probe sequences.</span></div>
<div style="position:absolute;top:655;left:341"><span class="ft0"> </span></div>
<div style="position:absolute;top:640;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:658;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:677;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:707;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:693;left:90"><span class="ft1"> The solution is to hash the key a second time, using a different hash function, and use </span></div>
<div style="position:absolute;top:709;left:90"><span class="ft1">the result as the step size. For a given key the step size remains constant throughout a </span></div>
<div style="position:absolute;top:725;left:90"><span class="ft1">probe, but it's different for different keys.</span></div>
<div style="position:absolute;top:722;left:338"><span class="ft0"> </span></div>
<div style="position:absolute;top:707;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:725;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:744;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:766;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:760;left:90"><span class="ft1"> Experience has shown that this secondary hash function must have certain </span></div>
<div style="position:absolute;top:776;left:90"><span class="ft1">characteristics:</span></div>
<div style="position:absolute;top:773;left:183"><span class="ft0"> </span></div>
<div style="position:absolute;top:766;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:776;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:795;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:811;left:79"><span class="ft0">  </span></div>
<div style="position:absolute;top:811;left:90"><span class="ft1"> .</span></div>
<div style="position:absolute;top:808;left:95"><span class="ft0">   </span></div>
<div style="position:absolute;top:811;left:107"><span class="ft1">It must not be the same as the primary hash function.</span></div>
<div style="position:absolute;top:808;left:435"><span class="ft0"> </span></div>
<div style="position:absolute;top:811;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:815;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:834;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:855;left:79"><span class="ft0">  </span></div>
<div style="position:absolute;top:850;left:90"><span class="ft1"> .</span></div>
<div style="position:absolute;top:847;left:95"><span class="ft0">   </span></div>
<div style="position:absolute;top:850;left:107"><span class="ft1">It must never output a 0 (otherwise there would be no step; every probe would land on </span></div>
<div style="position:absolute;top:866;left:107"><span class="ft1">the same cell, and the algorithm would go into an endless loop).</span></div>
<div style="position:absolute;top:863;left:500"><span class="ft0"> </span></div>
<div style="position:absolute;top:855;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:866;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:885;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:900;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:901;left:90"><span class="ft1"> Experts have discovered that functions of the following form work well:</span></div>
<div style="position:absolute;top:898;left:522"><span class="ft0"> </span></div>
<div style="position:absolute;top:900;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:904;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:923;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:938;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:938;left:113"><span class="ft5"> stepSize = constant - (key % constant);</span></div>
<div style="position:absolute;top:935;left:438"><span class="ft0"> </span></div>
<div style="position:absolute;top:938;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:942;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:961;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:977;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:978;left:90"><span class="ft1"> where </span></div>
<div style="position:absolute;top:978;left:132"><span class="ft5">constant</span></div>
<div style="position:absolute;top:978;left:199"><span class="ft1"> is prime and smaller than the array size. For example,</span></div>
<div style="position:absolute;top:975;left:534"><span class="ft0"> </span></div>
<div style="position:absolute;top:977;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:981;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1000;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1015;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1015;left:113"><span class="ft5"> stepSize = 5 - (key % 5);</span></div>
<div style="position:absolute;top:1012;left:322"><span class="ft0"> </span></div>
<div style="position:absolute;top:1015;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1019;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1038;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1060;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1054;left:90"><span class="ft1"> This is the secondary hash function used in the Workshop applet. For any given key all </span></div>
<div style="position:absolute;top:1070;left:90"><span class="ft1">the steps will be the same size, but different keys generate different step sizes. With this </span></div>
<div style="position:absolute;top:1060;left:640"><span class="ft0">  </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>