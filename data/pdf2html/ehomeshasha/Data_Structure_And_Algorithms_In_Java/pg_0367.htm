<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0367</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:bold;font-size:13px;font-family:Arial;color:#010100;}
.ft2{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft3{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#000000;}
.ft4{font-style:normal;font-weight:bold;font-size:16px;font-family:Arial;color:#010100;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0367.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:391"><span class="ft0"> - 367 -</span></div>
<div style="position:absolute;top:187;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:297;left:475"><span class="ft0">  </span></div>
<div style="position:absolute;top:187;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:297;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:316;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:331;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:332;left:136"><span class="ft1"> Figure 10.21:  A file index</span></div>
<div style="position:absolute;top:329;left:297"><span class="ft0"> </span></div>
<div style="position:absolute;top:331;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:354;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:353;left:136"><span class="ft3">  </span></div>
<div style="position:absolute;top:353;left:640"><span class="ft3">  </span></div>
<div style="position:absolute;top:354;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:373;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:389;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:389;left:90"><span class="ft4"> Index File in Memory</span></div>
<div style="position:absolute;top:389;left:255"><span class="ft0"> </span></div>
<div style="position:absolute;top:389;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:393;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:412;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:481;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:428;left:90"><span class="ft2"> Because it's so much smaller than the file containing actual records, it may be that the </span></div>
<div style="position:absolute;top:444;left:90"><span class="ft2">index is small enough to fit entirely in main memory. In our example there are 500,000 </span></div>
<div style="position:absolute;top:460;left:90"><span class="ft2">records. Each one has a 32-byte entry in the index, so the index will be 32x500,000 or </span></div>
<div style="position:absolute;top:476;left:90"><span class="ft2">1,600,000 bytes long (1.6 megabytes). In modern computers there's no problem fitting </span></div>
<div style="position:absolute;top:492;left:90"><span class="ft2">this in memory. The index can be stored on the disk, but read into memory whenever the </span></div>
<div style="position:absolute;top:508;left:90"><span class="ft2">database program is started up. From then on, operations on the index can take place in </span></div>
<div style="position:absolute;top:524;left:90"><span class="ft2">memory. At the end of the day (or perhaps more frequently) the index can be written back </span></div>
<div style="position:absolute;top:540;left:90"><span class="ft2">to disk for permanent storage.</span></div>
<div style="position:absolute;top:537;left:275"><span class="ft0"> </span></div>
<div style="position:absolute;top:481;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:540;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:559;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:574;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:574;left:90"><span class="ft4"> Searching</span></div>
<div style="position:absolute;top:574;left:171"><span class="ft0"> </span></div>
<div style="position:absolute;top:574;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:578;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:597;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:651;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:613;left:90"><span class="ft2"> The index-in-memory approach allows much faster operations on the phone book file </span></div>
<div style="position:absolute;top:629;left:90"><span class="ft2">than are possible with a file in which the records themselves are arranged sequentially. </span></div>
<div style="position:absolute;top:645;left:90"><span class="ft2">For example, a binary search requires 19 index accesses. At 20 microseconds per </span></div>
<div style="position:absolute;top:661;left:90"><span class="ft2">access, that's only about 4/10,000 of a second. Then there's (inevitably) the time to read </span></div>
<div style="position:absolute;top:677;left:90"><span class="ft2">the actual record from the file, once its block number has been found in the index. </span></div>
<div style="position:absolute;top:693;left:90"><span class="ft2">However, this is only one disk access of (say) 10 milliseconds.</span></div>
<div style="position:absolute;top:690;left:473"><span class="ft0"> </span></div>
<div style="position:absolute;top:651;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:693;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:712;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:727;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:728;left:90"><span class="ft4"> Insertion</span></div>
<div style="position:absolute;top:728;left:161"><span class="ft0"> </span></div>
<div style="position:absolute;top:727;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:731;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:750;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:780;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:766;left:90"><span class="ft2"> To insert a new item in an indexed file two steps are necessary. We first insert its full </span></div>
<div style="position:absolute;top:782;left:90"><span class="ft2">record into the main file; then we insert an entry, consisting of the key and the block </span></div>
<div style="position:absolute;top:798;left:90"><span class="ft2">number where the new record is stored, into the index.</span></div>
<div style="position:absolute;top:795;left:425"><span class="ft0"> </span></div>
<div style="position:absolute;top:780;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:798;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:817;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:871;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:833;left:90"><span class="ft2"> Because the index is in sequential order, to insert a new item we need to move half the </span></div>
<div style="position:absolute;top:849;left:90"><span class="ft2">index entries, on the average. Figuring 2 microseconds to move a byte in memory, we </span></div>
<div style="position:absolute;top:865;left:90"><span class="ft2">have 250,000 times 32 times 2, or about 16 seconds to insert a new entry. This </span></div>
<div style="position:absolute;top:881;left:90"><span class="ft2">compares with five minutes for the unindexed sequential file. (Note that we don't need to </span></div>
<div style="position:absolute;top:897;left:90"><span class="ft2">move any records in the main file; we simply append the new record at the end of the </span></div>
<div style="position:absolute;top:913;left:90"><span class="ft2">file.)</span></div>
<div style="position:absolute;top:910;left:116"><span class="ft0"> </span></div>
<div style="position:absolute;top:871;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:913;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:932;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:978;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:948;left:90"><span class="ft2"> Of course, you can use a more sophisticated approach to storing the index in memory. </span></div>
<div style="position:absolute;top:964;left:90"><span class="ft2">You could store it as a binary tree, 2-3-4 tree, or red-black tree, for example. Any of these </span></div>
<div style="position:absolute;top:980;left:90"><span class="ft2">would significantly reduce insertion and deletion times. In any case the index-in-memory </span></div>
<div style="position:absolute;top:996;left:90"><span class="ft2">approach is much faster than the sequential-file approach. In some cases it will also be </span></div>
<div style="position:absolute;top:1012;left:90"><span class="ft2">faster than a B-tree.</span></div>
<div style="position:absolute;top:1009;left:213"><span class="ft0"> </span></div>
<div style="position:absolute;top:978;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1012;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1031;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1053;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1047;left:90"><span class="ft2"> The only actual disk accesses necessary for an insertion into an indexed file involve the </span></div>
<div style="position:absolute;top:1063;left:90"><span class="ft2">new record itself. Usually the last block in the file is read into memory, the new record is </span></div>
<div style="position:absolute;top:1053;left:640"><span class="ft0">  </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>