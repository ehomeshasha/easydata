<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0015</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft2{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#ff0000;}
.ft3{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#000000;}
.ft4{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#008000;}
.ft5{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
.ft6{font-style:normal;font-weight:bold;font-size:16px;font-family:Arial;color:#010100;}
.ft7{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#010100;}
.ft8{font-style:italic;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0015.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:395"><span class="ft0"> - 15 -</span></div>
<div style="position:absolute;top:81;left:90"><span class="ft1">to understand the example programs in the text. What we say here won't transform you </span></div>
<div style="position:absolute;top:97;left:90"><span class="ft1">into an object-oriented Java programmer, but it should make it possible for you to follow </span></div>
<div style="position:absolute;top:112;left:90"><span class="ft1">the example programs.</span></div>
<div style="position:absolute;top:109;left:232"><span class="ft0"> </span></div>
<div style="position:absolute;top:113;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:132;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:169;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:148;left:90"><span class="ft1"> If after reading this section and examining some of the sample code in the following </span></div>
<div style="position:absolute;top:164;left:90"><span class="ft1">chapters you still find the whole OOP business as alien as quantum physics, then you </span></div>
<div style="position:absolute;top:180;left:90"><span class="ft1">may need a more thorough exposure to OOP. See</span></div>
<div style="position:absolute;top:180;left:401"><span class="ft2"> </span></div>
<div style="position:absolute;top:180;left:404"><span class="ft3">the reading</span></div>
<div style="position:absolute;top:180;left:474"><span class="ft2"> </span></div>
<div style="position:absolute;top:180;left:478"><span class="ft3">list in </span></div>
<div style="position:absolute;top:180;left:513"><span class="ft4">Appendix B, </span></div>
<div style="position:absolute;top:196;left:90"><span class="ft4">&quot;Further Reading</span></div>
<div style="position:absolute;top:196;left:196"><span class="ft3">,&quot; for suggestions.</span></div>
<div style="position:absolute;top:193;left:306"><span class="ft0"> </span></div>
<div style="position:absolute;top:169;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:196;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:215;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:231;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:230;left:90"><span class="ft5"> Problems with Procedural Languages</span></div>
<div style="position:absolute;top:232;left:426"><span class="ft0"> </span></div>
<div style="position:absolute;top:231;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:236;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:255;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:277;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:271;left:90"><span class="ft1"> OOP was invented because procedural languages, such as C, Pascal, and BASIC, were </span></div>
<div style="position:absolute;top:287;left:90"><span class="ft1">found to be inadequate for large and complex programs. Why was this.</span></div>
<div style="position:absolute;top:284;left:530"><span class="ft0"> </span></div>
<div style="position:absolute;top:277;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:288;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:307;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:344;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:322;left:90"><span class="ft1"> The problems have to do with the overall organization of the program. Procedural </span></div>
<div style="position:absolute;top:338;left:90"><span class="ft1">programs are organized by dividing the code into functions (called procedures or </span></div>
<div style="position:absolute;top:354;left:90"><span class="ft1">subroutines in some languages). Groups of functions could form larger units called </span></div>
<div style="position:absolute;top:370;left:90"><span class="ft1">modules or files.</span></div>
<div style="position:absolute;top:367;left:191"><span class="ft0"> </span></div>
<div style="position:absolute;top:344;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:371;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:390;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:405;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:405;left:90"><span class="ft6"> Crude Organizational Units</span></div>
<div style="position:absolute;top:405;left:305"><span class="ft0"> </span></div>
<div style="position:absolute;top:405;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:409;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:428;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:474;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:444;left:90"><span class="ft1"> One difficulty with this kind of function-based organization was that it focused on </span></div>
<div style="position:absolute;top:460;left:90"><span class="ft1">functions at the expense of data. There weren't many options when it came to data. To </span></div>
<div style="position:absolute;top:476;left:90"><span class="ft1">simplify slightly, data could be local to a particular function or it could be global¡ª</span></div>
<div style="position:absolute;top:492;left:90"><span class="ft1">accessible to all functions. There was no way (at least not a flexible way) to specify that </span></div>
<div style="position:absolute;top:508;left:90"><span class="ft1">some functions could access a variable and others couldn't.</span></div>
<div style="position:absolute;top:505;left:457"><span class="ft0"> </span></div>
<div style="position:absolute;top:474;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:508;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:527;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:573;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:543;left:90"><span class="ft1"> This caused problems when several functions needed to access the same data. To be </span></div>
<div style="position:absolute;top:559;left:90"><span class="ft1">available to more than one function, such variables had to be global, but global data </span></div>
<div style="position:absolute;top:575;left:90"><span class="ft1">could be accessed inadvertently by any function in the program. This lead to frequent </span></div>
<div style="position:absolute;top:591;left:90"><span class="ft1">programming errors. What was needed was a way to fine-tune data accessibility, allowing </span></div>
<div style="position:absolute;top:607;left:90"><span class="ft1">variables to be available to functions with a need to access it, but hiding it from others.</span></div>
<div style="position:absolute;top:604;left:619"><span class="ft0"> </span></div>
<div style="position:absolute;top:573;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:607;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:626;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:641;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:642;left:90"><span class="ft6"> Poor Modeling of the Real World</span></div>
<div style="position:absolute;top:642;left:348"><span class="ft0"> </span></div>
<div style="position:absolute;top:641;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:645;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:664;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:710;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:680;left:90"><span class="ft1"> It is also hard to conceptualize a real-world problem using procedural languages. </span></div>
<div style="position:absolute;top:696;left:90"><span class="ft1">Functions carry out a task, while data stores information, but most real-world objects do </span></div>
<div style="position:absolute;top:712;left:90"><span class="ft1">both these things. The thermostat on your furnace, for example, carries out tasks (turning </span></div>
<div style="position:absolute;top:728;left:90"><span class="ft1">the furnace on and off) but also stores information (the actual current temperature and </span></div>
<div style="position:absolute;top:744;left:90"><span class="ft1">the desired temperature).</span></div>
<div style="position:absolute;top:741;left:246"><span class="ft0"> </span></div>
<div style="position:absolute;top:710;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:744;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:763;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:819;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:779;left:90"><span class="ft1"> If you wrote a thermostat control program, you might end up with two functions, </span></div>
<div style="position:absolute;top:796;left:90"><span class="ft7">furnace_on()</span></div>
<div style="position:absolute;top:796;left:190"><span class="ft1"> and </span></div>
<div style="position:absolute;top:796;left:221"><span class="ft7">furnace_off()</span></div>
<div style="position:absolute;top:796;left:329"><span class="ft1">, but also two global variables, </span></div>
<div style="position:absolute;top:796;left:519"><span class="ft7">currentTemp</span></div>
<div style="position:absolute;top:796;left:611"><span class="ft1"> </span></div>
<div style="position:absolute;top:813;left:90"><span class="ft1">(supplied by a thermometer) and </span></div>
<div style="position:absolute;top:813;left:295"><span class="ft7">desiredTemp</span></div>
<div style="position:absolute;top:813;left:386"><span class="ft1"> (set by the user). However, these </span></div>
<div style="position:absolute;top:830;left:90"><span class="ft1">functions and variables wouldn't form any sort of programming unit; there would be no </span></div>
<div style="position:absolute;top:846;left:90"><span class="ft1">unit in the program you could call </span></div>
<div style="position:absolute;top:846;left:298"><span class="ft7">thermostat</span></div>
<div style="position:absolute;top:846;left:381"><span class="ft1">. The only such unit would be in the </span></div>
<div style="position:absolute;top:863;left:90"><span class="ft1">programmer's mind.</span></div>
<div style="position:absolute;top:860;left:213"><span class="ft0"> </span></div>
<div style="position:absolute;top:819;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:863;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:882;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:912;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:898;left:90"><span class="ft1"> For large programs, which might contain hundreds of entities like thermostats, this </span></div>
<div style="position:absolute;top:914;left:90"><span class="ft1">procedural approach made things chaotic, error-prone, and sometimes impossible to </span></div>
<div style="position:absolute;top:930;left:90"><span class="ft1">implement at all.</span></div>
<div style="position:absolute;top:927;left:191"><span class="ft0"> </span></div>
<div style="position:absolute;top:912;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:930;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:949;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:966;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:965;left:90"><span class="ft5"> Objects in a Nutshell</span></div>
<div style="position:absolute;top:967;left:276"><span class="ft0"> </span></div>
<div style="position:absolute;top:966;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:971;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:990;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1012;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1006;left:90"><span class="ft1"> The idea of objects arose in the programming community as a solution to the problems </span></div>
<div style="position:absolute;top:1022;left:90"><span class="ft1">with procedural languages.</span></div>
<div style="position:absolute;top:1019;left:256"><span class="ft0"> </span></div>
<div style="position:absolute;top:1012;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1022;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1041;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1056;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1057;left:90"><span class="ft6"> Objects</span></div>
<div style="position:absolute;top:1057;left:151"><span class="ft0"> </span></div>
<div style="position:absolute;top:1056;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1060;left:79"><span class="ft0"> </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>