<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0062</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:bold;font-size:13px;font-family:Arial;color:#010100;}
.ft2{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft3{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#000000;}
.ft4{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#008000;}
.ft5{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#000000;}
.ft6{font-style:normal;font-weight:bold;font-size:16px;font-family:Verdana;color:#000000;}
.ft7{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#000080;}
.ft8{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#010100;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0062.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:395"><span class="ft0"> - 62 -</span></div>
<div style="position:absolute;top:200;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:323;left:402"><span class="ft0">  </span></div>
<div style="position:absolute;top:200;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:323;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:342;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:358;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:358;left:136"><span class="ft1"> Figure 2.9:  Graph of Big O times</span></div>
<div style="position:absolute;top:355;left:344"><span class="ft0"> </span></div>
<div style="position:absolute;top:358;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:380;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:379;left:136"><span class="ft3">  </span></div>
<div style="position:absolute;top:379;left:640"><span class="ft3">  </span></div>
<div style="position:absolute;top:381;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:400;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:415;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:416;left:90"><span class="ft4"> Table 2.5</span></div>
<div style="position:absolute;top:416;left:148"><span class="ft5"> summarizes the running times of the algorithms we've discussed so far.</span></div>
<div style="position:absolute;top:413;left:591"><span class="ft0">   </span></div>
<div style="position:absolute;top:419;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:438;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:476;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:454;left:90"><span class="ft2"> Figure 2.9 graphs some Big O relationships between time and number of items. Based </span></div>
<div style="position:absolute;top:470;left:90"><span class="ft2">on this graph, we might rate the various Big O values (very subjectively) like this: O(1) is </span></div>
<div style="position:absolute;top:486;left:90"><span class="ft2">excellent, O(log N) is good, O(N) is fair, and O(N e2) is poor. O(N e2) occurs in the </span></div>
<div style="position:absolute;top:502;left:90"><span class="ft2">bubble sort and also in certain graph algorithms that we'll look at later in this book.</span></div>
<div style="position:absolute;top:499;left:594"><span class="ft0"> </span></div>
<div style="position:absolute;top:476;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:502;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:521;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:559;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:537;left:90"><span class="ft2"> The idea in Big O notation isn't to give an ac tual figure for running time, but to convey </span></div>
<div style="position:absolute;top:553;left:90"><span class="ft2">how the running times are affected by the number of items. This is the most meaningful </span></div>
<div style="position:absolute;top:569;left:90"><span class="ft2">way to compare algorithms, except perhaps actually measuring running times in a real </span></div>
<div style="position:absolute;top:585;left:90"><span class="ft2">installation.</span></div>
<div style="position:absolute;top:582;left:160"><span class="ft0"> </span></div>
<div style="position:absolute;top:559;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:585;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:602;left:79"><span class="ft6"> </span></div>
<div style="position:absolute;top:621;left:79"><span class="ft7">Why Not Use Arrays for Everything.</span></div>
<div style="position:absolute;top:623;left:403"><span class="ft0"> </span></div>
<div style="position:absolute;top:622;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:627;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:646;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:700;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:662;left:90"><span class="ft2"> They seem to get the job done, so why not us e arrays for all data storage. We've already </span></div>
<div style="position:absolute;top:678;left:90"><span class="ft2">seen some of their disadvantages. In an unordered array you can insert items quickly, in </span></div>
<div style="position:absolute;top:694;left:90"><span class="ft2">O(1) time, but searching takes slow O(N) time. In an ordered array you can search </span></div>
<div style="position:absolute;top:710;left:90"><span class="ft2">quickly, in O(logN) time, but insertion takes O(N) time. For both kinds of arrays, deletion </span></div>
<div style="position:absolute;top:726;left:90"><span class="ft2">takes O(N) time, because half the items (on the average) must be moved to fill in the </span></div>
<div style="position:absolute;top:742;left:90"><span class="ft2">hole.</span></div>
<div style="position:absolute;top:739;left:120"><span class="ft0"> </span></div>
<div style="position:absolute;top:700;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:742;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:761;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:799;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:777;left:90"><span class="ft2"> It would be nice if there were data structures that could do everything¡ªinsertion, </span></div>
<div style="position:absolute;top:793;left:90"><span class="ft2">deletion, and searching¡ªquickly, ideally in O(1) time, but if not that, then in O(logN) time. </span></div>
<div style="position:absolute;top:809;left:90"><span class="ft2">In the chapters ahead, we'll see how closely this ideal can be approached, and the price </span></div>
<div style="position:absolute;top:825;left:90"><span class="ft2">that must be paid in complexity.</span></div>
<div style="position:absolute;top:822;left:285"><span class="ft0"> </span></div>
<div style="position:absolute;top:799;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:825;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:844;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:898;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:860;left:90"><span class="ft2"> Another problem with arrays is that their size is fixed when the array is first created with </span></div>
<div style="position:absolute;top:876;left:90"><span class="ft8">new</span></div>
<div style="position:absolute;top:876;left:115"><span class="ft2">. Usually when the program first starts, you don't know exactly how many items will </span></div>
<div style="position:absolute;top:893;left:90"><span class="ft2">be placed in the array later on, so you guess how big it should be. If your guess is too </span></div>
<div style="position:absolute;top:909;left:90"><span class="ft2">large, you'll waste memory by having cells in the array that are never filled. If your guess </span></div>
<div style="position:absolute;top:925;left:90"><span class="ft2">is too small, you'll overflow the array, causing at best a message to the program's user, </span></div>
<div style="position:absolute;top:941;left:90"><span class="ft2">and at worst a program crash.</span></div>
<div style="position:absolute;top:938;left:275"><span class="ft0"> </span></div>
<div style="position:absolute;top:898;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:941;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:960;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:990;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:976;left:90"><span class="ft2"> Other data structures are more flexible and can expand to hold the number of items </span></div>
<div style="position:absolute;top:992;left:90"><span class="ft2">inserted in them. The linked list, discussed in</span></div>
<div style="position:absolute;top:992;left:366"><span class="ft4"> Chapter 5, &quot;Linked Lists,&quot;</span></div>
<div style="position:absolute;top:992;left:526"><span class="ft5"> is such a </span></div>
<div style="position:absolute;top:1008;left:90"><span class="ft5">structure.</span></div>
<div style="position:absolute;top:1005;left:148"><span class="ft0"> </span></div>
<div style="position:absolute;top:990;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1008;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1027;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1050;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1044;left:90"><span class="ft2"> We should mention that Java includes a class called </span></div>
<div style="position:absolute;top:1044;left:415"><span class="ft8">Vector</span></div>
<div style="position:absolute;top:1044;left:469"><span class="ft2"> that acts much like an array </span></div>
<div style="position:absolute;top:1060;left:90"><span class="ft2">but is expandable. This added capability comes at the expense of some loss of efficiency.</span></div>
<div style="position:absolute;top:1057;left:640"><span class="ft0"> </span></div>
<div style="position:absolute;top:1050;left:640"><span class="ft0"> </span></div>
<div style="position:absolute;top:1060;left:79"><span class="ft0"> </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>