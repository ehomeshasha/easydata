<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0333</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#000080;}
.ft2{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft3{font-style:normal;font-weight:normal;font-size:10px;font-family:Arial;color:#ff00ff;}
.ft4{font-style:normal;font-weight:normal;font-size:10px;font-family:Arial;color:#010100;}
.ft5{font-style:normal;font-weight:bold;font-size:16px;font-family:Verdana;color:#000000;}
.ft6{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#010100;}
.ft7{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#008000;}
.ft8{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#000000;}
.ft9{font-style:italic;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0333.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:391"><span class="ft0"> - 333 -</span></div>
<div style="position:absolute;top:81;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:80;left:90"><span class="ft1"> The Efficiency of Red-Black Trees</span></div>
<div style="position:absolute;top:82;left:392"><span class="ft0"> </span></div>
<div style="position:absolute;top:81;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:86;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:105;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:151;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:121;left:90"><span class="ft2"> Like ordinary binary search trees, a red-black tree allows for searching, insertion, and </span></div>
<div style="position:absolute;top:137;left:90"><span class="ft2">deletion in O(log</span></div>
<div style="position:absolute;top:140;left:191"><span class="ft3">2</span></div>
<div style="position:absolute;top:137;left:197"><span class="ft2">N) time. Search times should be almost the same in the red-black tree </span></div>
<div style="position:absolute;top:153;left:90"><span class="ft2">as in the ordinary tree because the red-black characteristics of the tree aren't used during </span></div>
<div style="position:absolute;top:169;left:90"><span class="ft2">searches. The only penalty is that the storage required for each node is increased slightly </span></div>
<div style="position:absolute;top:185;left:90"><span class="ft2">to accommodate the red-black color (a boolean variable).</span></div>
<div style="position:absolute;top:182;left:442"><span class="ft0"> </span></div>
<div style="position:absolute;top:151;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:185;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:204;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:234;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:220;left:90"><span class="ft2"> More specifically, according to Sedgewick (see Appendix B), in practice a search in a </span></div>
<div style="position:absolute;top:236;left:90"><span class="ft2">red-black tree takes about log</span></div>
<div style="position:absolute;top:239;left:273"><span class="ft4">2</span></div>
<div style="position:absolute;top:236;left:279"><span class="ft2">N comparisons, and it can be shown that it cannot require </span></div>
<div style="position:absolute;top:252;left:90"><span class="ft2">more than 2*log</span></div>
<div style="position:absolute;top:255;left:188"><span class="ft3">2</span></div>
<div style="position:absolute;top:252;left:194"><span class="ft2">N comparisons.</span></div>
<div style="position:absolute;top:249;left:291"><span class="ft0"> </span></div>
<div style="position:absolute;top:234;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:252;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:271;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:309;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:287;left:90"><span class="ft2"> The times for insertion and deletion are increased by a constant factor because of having </span></div>
<div style="position:absolute;top:303;left:90"><span class="ft2">to perform color flips and rotations on the way down and at the insertion point. On the </span></div>
<div style="position:absolute;top:319;left:90"><span class="ft2">average, an insertion requires about one rotation. Therefore, insertion still takes O(log</span></div>
<div style="position:absolute;top:322;left:617"><span class="ft3">2</span></div>
<div style="position:absolute;top:319;left:623"><span class="ft2">N) </span></div>
<div style="position:absolute;top:335;left:90"><span class="ft2">time, but is slower than insertion in the ordinary binary tree.</span></div>
<div style="position:absolute;top:332;left:454"><span class="ft0"> </span></div>
<div style="position:absolute;top:309;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:335;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:354;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:392;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:370;left:90"><span class="ft2"> Because in most applications there will be more searches than insertions and deletions, </span></div>
<div style="position:absolute;top:386;left:90"><span class="ft2">there is probably not much overall time penalty for using a red-black tree instead of an </span></div>
<div style="position:absolute;top:402;left:90"><span class="ft2">ordinary tree. Of course, the advantage is that in a red-black tree sorted data doesn't lead </span></div>
<div style="position:absolute;top:418;left:90"><span class="ft2">to slow O(N) performance.</span></div>
<div style="position:absolute;top:415;left:253"><span class="ft0"> </span></div>
<div style="position:absolute;top:418;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:435;left:79"><span class="ft5"> </span></div>
<div style="position:absolute;top:455;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:454;left:90"><span class="ft1"> Implementation</span></div>
<div style="position:absolute;top:456;left:229"><span class="ft0"> </span></div>
<div style="position:absolute;top:455;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:460;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:479;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:517;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:495;left:90"><span class="ft2"> If you're writing an insertion routine for red-black trees, all you need to do (irony intended) </span></div>
<div style="position:absolute;top:511;left:90"><span class="ft2">is to write code to carry out the operations described above. As we noted, showing and </span></div>
<div style="position:absolute;top:527;left:90"><span class="ft2">describing such code is beyond the scope of this book. However, here's what you'll need </span></div>
<div style="position:absolute;top:543;left:90"><span class="ft2">to think about.</span></div>
<div style="position:absolute;top:540;left:178"><span class="ft0"> </span></div>
<div style="position:absolute;top:517;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:543;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:562;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:578;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:579;left:90"><span class="ft2"> You'll need to add a red-black field (which can be type boolean) to the </span></div>
<div style="position:absolute;top:579;left:523"><span class="ft6">Node</span></div>
<div style="position:absolute;top:579;left:556"><span class="ft2"> class.</span></div>
<div style="position:absolute;top:576;left:596"><span class="ft0">   </span></div>
<div style="position:absolute;top:582;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:601;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:639;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:617;left:90"><span class="ft2"> You can adapt the insertion routine from the </span></div>
<div style="position:absolute;top:617;left:364"><span class="ft6">tree.java</span></div>
<div style="position:absolute;top:617;left:439"><span class="ft2"> program in</span></div>
<div style="position:absolute;top:617;left:510"><span class="ft7"> Chapter 8.</span></div>
<div style="position:absolute;top:617;left:578"><span class="ft8"> On the </span></div>
<div style="position:absolute;top:634;left:90"><span class="ft8">way down to the insertion point, check whether the current node is black and its two </span></div>
<div style="position:absolute;top:650;left:90"><span class="ft8">children are both red. If so, change the color of all three (unless the parent is the root, </span></div>
<div style="position:absolute;top:666;left:90"><span class="ft8">which must be kept black).</span></div>
<div style="position:absolute;top:663;left:254"><span class="ft0"> </span></div>
<div style="position:absolute;top:639;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:666;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:685;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:707;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:701;left:90"><span class="ft2"> After a color flip, check that there are no violations of Rule 3. If so, perform the </span></div>
<div style="position:absolute;top:717;left:90"><span class="ft2">appropriate rotations: one for an outside grandchild, two for an inside grandchild.</span></div>
<div style="position:absolute;top:714;left:585"><span class="ft0"> </span></div>
<div style="position:absolute;top:707;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:717;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:736;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:759;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:753;left:90"><span class="ft2"> When you reach a leaf node, insert the new node as in </span></div>
<div style="position:absolute;top:753;left:430"><span class="ft6">tree.java</span></div>
<div style="position:absolute;top:753;left:505"><span class="ft2">, making sure the </span></div>
<div style="position:absolute;top:769;left:90"><span class="ft2">node is red. Check again for red-red conflicts, and perform any necessary rotations.</span></div>
<div style="position:absolute;top:766;left:604"><span class="ft0">   </span></div>
<div style="position:absolute;top:769;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:788;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:826;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:804;left:90"><span class="ft2"> Perhaps surprisingly, your software need not keep track of the black height of different </span></div>
<div style="position:absolute;top:820;left:90"><span class="ft2">parts of the tree (although you might want to check this during debugging). You only need </span></div>
<div style="position:absolute;top:836;left:90"><span class="ft2">to check for violations of Rule 3, a red parent with a red child, which can be done locally </span></div>
<div style="position:absolute;top:852;left:90"><span class="ft2">(unlike checks of black heights, Rule 4, which would require more complex bookkeeping).</span></div>
<div style="position:absolute;top:849;left:639"><span class="ft0"> </span></div>
<div style="position:absolute;top:826;left:640"><span class="ft0"> </span></div>
<div style="position:absolute;top:852;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:872;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:909;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:887;left:90"><span class="ft2"> If you perform the color flips, color changes, and rotations described earlier, the black </span></div>
<div style="position:absolute;top:903;left:90"><span class="ft2">heights of the nodes should take care of themselves and the tree should remain balanced. </span></div>
<div style="position:absolute;top:919;left:90"><span class="ft2">The RBTree Workshop applet reports black-height errors only because the user is not </span></div>
<div style="position:absolute;top:935;left:90"><span class="ft2">forced to carry out insertion algorithm correctly.</span></div>
<div style="position:absolute;top:932;left:380"><span class="ft0"> </span></div>
<div style="position:absolute;top:935;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:952;left:79"><span class="ft5"> </span></div>
<div style="position:absolute;top:971;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:991;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:990;left:90"><span class="ft1"> Other Balanced Trees</span></div>
<div style="position:absolute;top:992;left:284"><span class="ft0"> </span></div>
<div style="position:absolute;top:991;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:996;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1016;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1045;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1031;left:90"><span class="ft2"> The AVL tree is the earliest kind of balanced tree. It's named after its inventors: Adelson-</span></div>
<div style="position:absolute;top:1047;left:90"><span class="ft2">Velskii and Landis. In AVL trees each node stores an additional piece of data: the </span></div>
<div style="position:absolute;top:1063;left:90"><span class="ft2">difference between the heights of its left and right subtrees. This difference may not be </span></div>
<div style="position:absolute;top:1045;left:640"><span class="ft0">  </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>