<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0400</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft2{font-style:normal;font-weight:bold;font-size:16px;font-family:Arial;color:#010100;}
.ft3{font-style:italic;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft4{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
.ft5{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#010100;}
.ft6{font-style:normal;font-weight:bold;font-size:13px;font-family:Arial;color:#800000;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0400.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:391"><span class="ft0"> - 400 -</span></div>
<div style="position:absolute;top:81;left:90"><span class="ft1">especially when it's hard to predict in advance how much data will be placed in the hash </span></div>
<div style="position:absolute;top:97;left:90"><span class="ft1">table.</span></div>
<div style="position:absolute;top:94;left:124"><span class="ft0"> </span></div>
<div style="position:absolute;top:97;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:116;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:131;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:131;left:90"><span class="ft2"> Duplicates</span></div>
<div style="position:absolute;top:131;left:175"><span class="ft0"> </span></div>
<div style="position:absolute;top:131;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:135;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:154;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:192;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:170;left:90"><span class="ft1"> Duplicates are allowed and may be generated in the Fill process. All items with the same </span></div>
<div style="position:absolute;top:186;left:90"><span class="ft1">key will be inserted in the same list, so if you need to discover all of them, you must </span></div>
<div style="position:absolute;top:202;left:90"><span class="ft1">search the entire list in both successful and unsuccessful searches. This lowers </span></div>
<div style="position:absolute;top:218;left:90"><span class="ft1">performance. The Find operation in the applet only finds the first of several duplicates.</span></div>
<div style="position:absolute;top:215;left:618"><span class="ft0"> </span></div>
<div style="position:absolute;top:192;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:218;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:237;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:253;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:253;left:90"><span class="ft2"> Deletion</span></div>
<div style="position:absolute;top:253;left:156"><span class="ft0"> </span></div>
<div style="position:absolute;top:253;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:256;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:275;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:313;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:291;left:90"><span class="ft1"> In separate chaining, deletion poses no special problems as it does in open addressing. </span></div>
<div style="position:absolute;top:307;left:90"><span class="ft1">The algorithm hashes to the proper list and then deletes the item from the list. Because </span></div>
<div style="position:absolute;top:323;left:90"><span class="ft1">probes aren't used, it doesn't matter if the list at a particular cell becomes empty. We've </span></div>
<div style="position:absolute;top:339;left:90"><span class="ft1">included a Del button in the Workshop applet to show how deletion works.</span></div>
<div style="position:absolute;top:336;left:544"><span class="ft0"> </span></div>
<div style="position:absolute;top:313;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:339;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:358;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:374;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:374;left:90"><span class="ft2"> Table Size</span></div>
<div style="position:absolute;top:374;left:172"><span class="ft0"> </span></div>
<div style="position:absolute;top:374;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:378;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:397;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:435;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:413;left:90"><span class="ft1"> With separate chaining it's not so important to make the table size a prime number, as it </span></div>
<div style="position:absolute;top:429;left:90"><span class="ft1">is with quadratic probes and double hashing. There are no probes in separate chaining, </span></div>
<div style="position:absolute;top:445;left:90"><span class="ft1">so there's no need to worry that a probe will go into an endless sequence because the </span></div>
<div style="position:absolute;top:461;left:90"><span class="ft1">step size divides evenly into the array size.</span></div>
<div style="position:absolute;top:458;left:354"><span class="ft0"> </span></div>
<div style="position:absolute;top:435;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:461;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:480;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:510;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:496;left:90"><span class="ft1"> On the other hand, certain kinds of key distributions can cause data to cluster when the </span></div>
<div style="position:absolute;top:512;left:90"><span class="ft1">array size is not a prime number. We'll have more to say about this when we discuss </span></div>
<div style="position:absolute;top:528;left:90"><span class="ft1">hash functions.</span></div>
<div style="position:absolute;top:525;left:184"><span class="ft0"> </span></div>
<div style="position:absolute;top:510;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:528;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:547;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:562;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:563;left:90"><span class="ft2"> Buckets</span></div>
<div style="position:absolute;top:563;left:155"><span class="ft0"> </span></div>
<div style="position:absolute;top:562;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:566;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:585;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:631;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:601;left:90"><span class="ft1"> Another approach similar to separate chaining is to use an array at each location in the </span></div>
<div style="position:absolute;top:617;left:90"><span class="ft1">hash table, instead of a linked list. Such arrays are called buckets. This approach is not </span></div>
<div style="position:absolute;top:633;left:90"><span class="ft1">as efficient as the linked list approach, however, because of the problem of choosing the </span></div>
<div style="position:absolute;top:649;left:90"><span class="ft1">size of the buckets. If they're too small they may overflow, and if they're too large they </span></div>
<div style="position:absolute;top:665;left:90"><span class="ft1">waste memory. Linked lists, which allocate memory dynamically, don't have this problem.</span></div>
<div style="position:absolute;top:662;left:637"><span class="ft0"> </span></div>
<div style="position:absolute;top:631;left:640"><span class="ft0"> </span></div>
<div style="position:absolute;top:665;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:684;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:701;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:700;left:90"><span class="ft4"> Java Code for Separate Chaining</span></div>
<div style="position:absolute;top:702;left:384"><span class="ft0"> </span></div>
<div style="position:absolute;top:701;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:706;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:725;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:763;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:741;left:90"><span class="ft1"> The </span></div>
<div style="position:absolute;top:741;left:118"><span class="ft5">hashChain.java</span></div>
<div style="position:absolute;top:741;left:235"><span class="ft1"> program includes a </span></div>
<div style="position:absolute;top:741;left:361"><span class="ft5">SortedList</span></div>
<div style="position:absolute;top:741;left:444"><span class="ft1"> class and an associated </span></div>
<div style="position:absolute;top:741;left:600"><span class="ft5">Link</span></div>
<div style="position:absolute;top:741;left:633"><span class="ft1"> </span></div>
<div style="position:absolute;top:758;left:90"><span class="ft1">class. Sorted lists don't speed up a success ful search, but they do cut the time of an </span></div>
<div style="position:absolute;top:774;left:90"><span class="ft1">unsuccessful search in half. (As soon as an item larger than the search key is reached, </span></div>
<div style="position:absolute;top:790;left:90"><span class="ft1">which on average is half the items in a list, the search is declared a failure.)</span></div>
<div style="position:absolute;top:787;left:552"><span class="ft0"> </span></div>
<div style="position:absolute;top:763;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:790;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:809;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:847;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:825;left:90"><span class="ft1"> Deletion times are also cut in half; however, insertion times are lengthened, because the </span></div>
<div style="position:absolute;top:841;left:90"><span class="ft1">new item can't just be inserted at the beginning of the list; its proper place in the ordered </span></div>
<div style="position:absolute;top:857;left:90"><span class="ft1">list must be located before it's inserted. If the lists are short, the increase in insertion </span></div>
<div style="position:absolute;top:873;left:90"><span class="ft1">times may not be important.</span></div>
<div style="position:absolute;top:870;left:262"><span class="ft0"> </span></div>
<div style="position:absolute;top:847;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:873;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:892;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:922;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:908;left:90"><span class="ft1"> In situations where many unsuccessful searches are anticipated, it may be worthwhile to </span></div>
<div style="position:absolute;top:924;left:90"><span class="ft1">use the slightly more complicated sorted list, rather than an unsorted list. However, an </span></div>
<div style="position:absolute;top:940;left:90"><span class="ft1">unsorted list is preferred if insertion speed is more important.</span></div>
<div style="position:absolute;top:937;left:463"><span class="ft0"> </span></div>
<div style="position:absolute;top:922;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:940;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:959;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:998;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:976;left:90"><span class="ft1"> The </span></div>
<div style="position:absolute;top:976;left:118"><span class="ft5">hashChain.java</span></div>
<div style="position:absolute;top:976;left:235"><span class="ft1"> program, shown in Listing 11.1, begins by constructing a hash </span></div>
<div style="position:absolute;top:993;left:90"><span class="ft1">table with a table size and number of items entered by the user. The user can then insert, </span></div>
<div style="position:absolute;top:1009;left:90"><span class="ft1">find, and delete items, and display the list. For the entire hash table to be viewed on the </span></div>
<div style="position:absolute;top:1024;left:90"><span class="ft1">screen, the size of the table must be no greater than 16 or so.</span></div>
<div style="position:absolute;top:1021;left:469"><span class="ft0"> </span></div>
<div style="position:absolute;top:998;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1025;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1044;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1059;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1060;left:90"><span class="ft6"> Listing 11.1 The hashChain.java Program</span></div>
<div style="position:absolute;top:1057;left:362"><span class="ft0"> </span></div>
<div style="position:absolute;top:1059;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1063;left:79"><span class="ft0"> </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>