<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0060</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#010100;}
.ft2{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft3{font-style:normal;font-weight:bold;font-size:16px;font-family:Verdana;color:#000000;}
.ft4{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#000080;}
.ft5{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0060.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:395"><span class="ft0"> - 60 -</span></div>
<div style="position:absolute;top:80;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:80;left:113"><span class="ft1">    Last name: Stimson, First name: Henry, Age: 29</span></div>
<div style="position:absolute;top:77;left:521"><span class="ft0"> </span></div>
<div style="position:absolute;top:80;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:84;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:99;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:99;left:113"><span class="ft1">    Last name: Velasquez, First name: Jose, Age: 72</span></div>
<div style="position:absolute;top:96;left:530"><span class="ft0"> </span></div>
<div style="position:absolute;top:99;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:103;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:118;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:118;left:113"><span class="ft1">    Last name: Lamarque, First name: Henry, Age: 54</span></div>
<div style="position:absolute;top:115;left:530"><span class="ft0"> </span></div>
<div style="position:absolute;top:118;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:122;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:141;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:157;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:156;left:113"><span class="ft1">    Last name: Vang, First name: Minh, Age: 22</span></div>
<div style="position:absolute;top:153;left:488"><span class="ft0"> </span></div>
<div style="position:absolute;top:157;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:161;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:180;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:217;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:196;left:90"><span class="ft2"> This program shows that class objects can be handled by data storage structures in much </span></div>
<div style="position:absolute;top:212;left:90"><span class="ft2">the same way as primitive types. (Note that a serious program using the last name as a ke</span></div>
<div style="position:absolute;top:212;left:645"><span class="ft2">y</span></div>
<div style="position:absolute;top:227;left:90"><span class="ft2">would need to account for duplicate last names, which would complicate the programming </span></div>
<div style="position:absolute;top:243;left:90"><span class="ft2">as discussed earlier.) </span></div>
<div style="position:absolute;top:240;left:226"><span class="ft0"> </span></div>
<div style="position:absolute;top:244;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:260;left:79"><span class="ft3"> </span></div>
<div style="position:absolute;top:280;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:279;left:90"><span class="ft4"> Big O Notation</span></div>
<div style="position:absolute;top:281;left:221"><span class="ft0"> </span></div>
<div style="position:absolute;top:280;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:285;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:304;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:350;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:320;left:90"><span class="ft2"> Automobiles are divided by size into several categories: subcompacts, compacts, </span></div>
<div style="position:absolute;top:336;left:90"><span class="ft2">midsize, and so on. These categories provide a quick idea what size car you're talking </span></div>
<div style="position:absolute;top:352;left:90"><span class="ft2">about, without needing to mention actual dimensions. Similarly, it's useful to have a </span></div>
<div style="position:absolute;top:368;left:90"><span class="ft2">shorthand way to say how efficient a computer algorithm is. In computer science, this </span></div>
<div style="position:absolute;top:384;left:90"><span class="ft2">rough measure is called Big O notation.</span></div>
<div style="position:absolute;top:381;left:333"><span class="ft0"> </span></div>
<div style="position:absolute;top:350;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:384;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:404;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:465;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:419;left:90"><span class="ft2"> You might think that in comparing algorithms you would say things like &quot;Algorithm A is </span></div>
<div style="position:absolute;top:435;left:90"><span class="ft2">twice as fast as algorithm B,&quot; but in fact this sort of statement isn't too meaningful. Why </span></div>
<div style="position:absolute;top:451;left:90"><span class="ft2">not. Because the proportion can change radically as the number of items changes. </span></div>
<div style="position:absolute;top:467;left:90"><span class="ft2">Perhaps you increase the number of items by 50%, and now A is three times as fast as </span></div>
<div style="position:absolute;top:483;left:90"><span class="ft2">B. Or you have half as many items, and A and B are now equal. What you need is a </span></div>
<div style="position:absolute;top:499;left:90"><span class="ft2">comparison that's related to the number of items. Let's see how this looks for the </span></div>
<div style="position:absolute;top:515;left:90"><span class="ft2">algorithms we've seen so far.</span></div>
<div style="position:absolute;top:512;left:270"><span class="ft0"> </span></div>
<div style="position:absolute;top:465;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:515;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:534;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:551;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:550;left:90"><span class="ft5"> Insertion in an Unordered Array: Constant</span></div>
<div style="position:absolute;top:552;left:465"><span class="ft0"> </span></div>
<div style="position:absolute;top:551;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:556;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:575;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:622;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:591;left:90"><span class="ft2"> Insertion into an unordered array is the only algorithm we've seen that doesn't depend on </span></div>
<div style="position:absolute;top:607;left:90"><span class="ft2">how many items are in the array. The new item is always placed in the next available </span></div>
<div style="position:absolute;top:624;left:90"><span class="ft2">position, at </span></div>
<div style="position:absolute;top:624;left:161"><span class="ft1">a[nElems]</span></div>
<div style="position:absolute;top:624;left:236"><span class="ft2">, and </span></div>
<div style="position:absolute;top:624;left:271"><span class="ft1">nElems</span></div>
<div style="position:absolute;top:624;left:321"><span class="ft2"> is then incremented. This requires the same </span></div>
<div style="position:absolute;top:640;left:90"><span class="ft2">amount of time no matter how big N¡ªthe number of items in the array¡ªis. We can say </span></div>
<div style="position:absolute;top:656;left:90"><span class="ft2">that the time, T, to insert an item into an unsorted array is a constant K:</span></div>
<div style="position:absolute;top:653;left:527"><span class="ft0"> </span></div>
<div style="position:absolute;top:622;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:656;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:675;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:691;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:690;left:113"><span class="ft1"> T = K</span></div>
<div style="position:absolute;top:687;left:155"><span class="ft0"> </span></div>
<div style="position:absolute;top:691;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:695;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:714;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:768;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:730;left:90"><span class="ft2"> In a real situation, the actual time (in microseconds or whatever) required by the insertion </span></div>
<div style="position:absolute;top:746;left:90"><span class="ft2">is related to the speed of the microprocessor, how efficiently the compiler has generated </span></div>
<div style="position:absolute;top:762;left:90"><span class="ft2">the program code, and other factors. The constant K in the equation above is used to </span></div>
<div style="position:absolute;top:778;left:90"><span class="ft2">account for all such factors. To find out what K is in a real situation, you need to measure </span></div>
<div style="position:absolute;top:794;left:90"><span class="ft2">how long an insertion took. (Software exists for this very purpose.) K would then be equal </span></div>
<div style="position:absolute;top:810;left:90"><span class="ft2">to that time.</span></div>
<div style="position:absolute;top:807;left:163"><span class="ft0"> </span></div>
<div style="position:absolute;top:768;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:810;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:829;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:845;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:844;left:90"><span class="ft5"> Linear Search: Proportional to N</span></div>
<div style="position:absolute;top:846;left:379"><span class="ft0"> </span></div>
<div style="position:absolute;top:845;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:850;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:869;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:907;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:885;left:90"><span class="ft2"> We've seen that, in a linear search of items in an array, the number of comparisons that </span></div>
<div style="position:absolute;top:901;left:90"><span class="ft2">must be made to find a specified item is, on the average, half of the total number of </span></div>
<div style="position:absolute;top:917;left:90"><span class="ft2">items. Thus, if N is the total number of items, the search time T is proportional to half of </span></div>
<div style="position:absolute;top:933;left:90"><span class="ft2">N:</span></div>
<div style="position:absolute;top:930;left:104"><span class="ft0"> </span></div>
<div style="position:absolute;top:907;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:933;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:953;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:968;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:967;left:113"><span class="ft1"> T = K * N / 2</span></div>
<div style="position:absolute;top:964;left:222"><span class="ft0"> </span></div>
<div style="position:absolute;top:968;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:972;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:991;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1021;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1007;left:90"><span class="ft2"> As with insertions, discovering the value of K in this equation would require timing a </span></div>
<div style="position:absolute;top:1023;left:90"><span class="ft2">search for some (probably large) value of N, and then using the resulting value of T to </span></div>
<div style="position:absolute;top:1039;left:90"><span class="ft2">calculate K. Once you knew K, then you could calculate T for any other value of N.</span></div>
<div style="position:absolute;top:1036;left:596"><span class="ft0">   </span></div>
<div style="position:absolute;top:1039;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1058;left:80"><span class="ft0"> </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>