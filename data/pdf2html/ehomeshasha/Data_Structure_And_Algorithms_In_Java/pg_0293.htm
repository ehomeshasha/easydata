<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0293</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
.ft2{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft3{font-style:normal;font-weight:bold;font-size:13px;font-family:Arial;color:#010100;}
.ft4{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#010100;}
.ft5{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#000000;}
.ft6{font-style:italic;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0293.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:391"><span class="ft0"> - 293 -</span></div>
<div style="position:absolute;top:84;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:100;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:99;left:90"><span class="ft1"> Traversing a 3-Node Tree</span></div>
<div style="position:absolute;top:101;left:315"><span class="ft0"> </span></div>
<div style="position:absolute;top:100;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:105;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:125;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:154;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:140;left:90"><span class="ft2"> Let's look at a simple example to get an idea of how this recursive traversal routine </span></div>
<div style="position:absolute;top:156;left:90"><span class="ft2">works. Imagine traversing a tree with only three nodes: a root (A) with a left child (B) and </span></div>
<div style="position:absolute;top:172;left:90"><span class="ft2">a right child (C), as shown in Figure 8.9.</span></div>
<div style="position:absolute;top:169;left:336"><span class="ft0"> </span></div>
<div style="position:absolute;top:154;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:173;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:192;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:326;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:448;left:396"><span class="ft0">  </span></div>
<div style="position:absolute;top:326;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:448;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:467;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:482;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:483;left:136"><span class="ft3"> Figure 8.9:  </span></div>
<div style="position:absolute;top:483;left:214"><span class="ft4">inOrder() </span></div>
<div style="position:absolute;top:483;left:297"><span class="ft2">method applied to 3-node tree</span></div>
<div style="position:absolute;top:480;left:483"><span class="ft0"> </span></div>
<div style="position:absolute;top:482;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:505;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:504;left:136"><span class="ft5">  </span></div>
<div style="position:absolute;top:504;left:640"><span class="ft5">  </span></div>
<div style="position:absolute;top:505;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:524;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:556;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:541;left:90"><span class="ft2"> We start by calling </span></div>
<div style="position:absolute;top:541;left:208"><span class="ft4">inOrder()</span></div>
<div style="position:absolute;top:541;left:283"><span class="ft2"> with the root A as an argument. This incarnation of </span></div>
<div style="position:absolute;top:558;left:90"><span class="ft4">inOrder()</span></div>
<div style="position:absolute;top:558;left:165"><span class="ft2"> we'll call </span></div>
<div style="position:absolute;top:558;left:224"><span class="ft4">inOrder(A)</span></div>
<div style="position:absolute;top:558;left:308"><span class="ft2">. </span></div>
<div style="position:absolute;top:558;left:315"><span class="ft4">inOrder(A)</span></div>
<div style="position:absolute;top:558;left:399"><span class="ft2"> first calls </span></div>
<div style="position:absolute;top:558;left:460"><span class="ft4">inOrder()</span></div>
<div style="position:absolute;top:558;left:535"><span class="ft2"> with its left </span></div>
<div style="position:absolute;top:575;left:90"><span class="ft2">child, B, as an argument. This second incarnation of </span></div>
<div style="position:absolute;top:575;left:414"><span class="ft4">inOrder()</span></div>
<div style="position:absolute;top:575;left:489"><span class="ft2"> we'll call </span></div>
<div style="position:absolute;top:575;left:548"><span class="ft4">inOrder(B)</span></div>
<div style="position:absolute;top:575;left:631"><span class="ft2">.</span></div>
<div style="position:absolute;top:572;left:635"><span class="ft0"> </span></div>
<div style="position:absolute;top:556;left:640"><span class="ft0"> </span></div>
<div style="position:absolute;top:576;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:595;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:643;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:612;left:90"><span class="ft4"> inOrder(B)</span></div>
<div style="position:absolute;top:612;left:174"><span class="ft2"> now calls itself with its left child as an argument. However, it has no left </span></div>
<div style="position:absolute;top:629;left:90"><span class="ft2">child, so this argument is null. This creates an invocation of </span></div>
<div style="position:absolute;top:629;left:457"><span class="ft4">inOrder()</span></div>
<div style="position:absolute;top:629;left:532"><span class="ft2"> we could call </span></div>
<div style="position:absolute;top:646;left:90"><span class="ft4">inOrder(null)</span></div>
<div style="position:absolute;top:646;left:199"><span class="ft2">. There are now three instances of </span></div>
<div style="position:absolute;top:646;left:413"><span class="ft4">inOrder()</span></div>
<div style="position:absolute;top:646;left:488"><span class="ft2"> in existence: </span></div>
<div style="position:absolute;top:663;left:90"><span class="ft4">inOrder(A)</span></div>
<div style="position:absolute;top:663;left:174"><span class="ft2">, </span></div>
<div style="position:absolute;top:663;left:181"><span class="ft4">inOrder(B)</span></div>
<div style="position:absolute;top:663;left:265"><span class="ft2">, and </span></div>
<div style="position:absolute;top:663;left:299"><span class="ft4">inOrder(null)</span></div>
<div style="position:absolute;top:663;left:408"><span class="ft2">. However, </span></div>
<div style="position:absolute;top:663;left:478"><span class="ft4">inOrder(null)</span></div>
<div style="position:absolute;top:663;left:586"><span class="ft2"> returns </span></div>
<div style="position:absolute;top:680;left:90"><span class="ft2">immediately when it finds its argument is null. (We all have days like that.)</span></div>
<div style="position:absolute;top:677;left:543"><span class="ft0"> </span></div>
<div style="position:absolute;top:643;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:680;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:699;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:747;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:716;left:90"><span class="ft2"> Now </span></div>
<div style="position:absolute;top:716;left:122"><span class="ft4">inOrder(B)</span></div>
<div style="position:absolute;top:716;left:205"><span class="ft2"> goes on to visit B; we'll assume this means to display it. Then </span></div>
<div style="position:absolute;top:733;left:90"><span class="ft4">inOrder(B)</span></div>
<div style="position:absolute;top:733;left:174"><span class="ft2"> calls </span></div>
<div style="position:absolute;top:733;left:209"><span class="ft4">inOrder()</span></div>
<div style="position:absolute;top:733;left:284"><span class="ft2"> again, with its right child as an argument. Again this </span></div>
<div style="position:absolute;top:750;left:90"><span class="ft2">argument is null, so the second </span></div>
<div style="position:absolute;top:750;left:286"><span class="ft4">inOrder(null)</span></div>
<div style="position:absolute;top:750;left:395"><span class="ft2"> returns immediately. Now </span></div>
<div style="position:absolute;top:767;left:90"><span class="ft4">inOrder(B)</span></div>
<div style="position:absolute;top:767;left:174"><span class="ft2"> has carried out steps 1, 2, and 3, so it returns (and thereby ceases to </span></div>
<div style="position:absolute;top:784;left:90"><span class="ft2">exist).</span></div>
<div style="position:absolute;top:781;left:127"><span class="ft0"> </span></div>
<div style="position:absolute;top:747;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:784;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:803;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:843;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:819;left:90"><span class="ft2"> Now we're back to </span></div>
<div style="position:absolute;top:819;left:207"><span class="ft4">inOrder(A)</span></div>
<div style="position:absolute;top:819;left:290"><span class="ft2">, just returning from traversing A's left child. We visit A, </span></div>
<div style="position:absolute;top:837;left:90"><span class="ft2">and then call </span></div>
<div style="position:absolute;top:837;left:173"><span class="ft4">inOrder()</span></div>
<div style="position:absolute;top:837;left:248"><span class="ft2"> again with C as an argument, creating </span></div>
<div style="position:absolute;top:837;left:489"><span class="ft4">inOrder(C)</span></div>
<div style="position:absolute;top:837;left:573"><span class="ft2">. Like </span></div>
<div style="position:absolute;top:854;left:90"><span class="ft4">inOrder(B)</span></div>
<div style="position:absolute;top:854;left:174"><span class="ft2">, </span></div>
<div style="position:absolute;top:854;left:181"><span class="ft4">inOrder(C)</span></div>
<div style="position:absolute;top:854;left:265"><span class="ft2"> has no children, so step 1 returns with no action, step 2 </span></div>
<div style="position:absolute;top:871;left:90"><span class="ft2">visits C, and step 3 returns with no action. </span></div>
<div style="position:absolute;top:871;left:351"><span class="ft4">inOrder(B)</span></div>
<div style="position:absolute;top:871;left:434"><span class="ft2"> now returns to </span></div>
<div style="position:absolute;top:871;left:530"><span class="ft4">inOrder(A)</span></div>
<div style="position:absolute;top:871;left:614"><span class="ft2">.</span></div>
<div style="position:absolute;top:868;left:617"><span class="ft0"> </span></div>
<div style="position:absolute;top:843;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:872;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:891;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:921;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:907;left:90"><span class="ft2"> However, </span></div>
<div style="position:absolute;top:907;left:153"><span class="ft4">inOrder(A)</span></div>
<div style="position:absolute;top:907;left:236"><span class="ft2"> is now done, so it returns and the entire traversal is complete. </span></div>
<div style="position:absolute;top:924;left:90"><span class="ft2">The order in which the nodes were visited is A, B, C; they have been visited inorder. In a </span></div>
<div style="position:absolute;top:940;left:90"><span class="ft2">binary search tree this would be the order of ascending keys.</span></div>
<div style="position:absolute;top:937;left:465"><span class="ft0"> </span></div>
<div style="position:absolute;top:921;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:940;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:959;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:982;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:976;left:90"><span class="ft2"> More complex trees are handled similarly. The </span></div>
<div style="position:absolute;top:976;left:379"><span class="ft4">inOrder()</span></div>
<div style="position:absolute;top:976;left:454"><span class="ft2"> function calls itself for each </span></div>
<div style="position:absolute;top:992;left:90"><span class="ft2">node, until it has worked its way through the entire tree.</span></div>
<div style="position:absolute;top:989;left:431"><span class="ft0"> </span></div>
<div style="position:absolute;top:982;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:993;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1012;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1028;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1027;left:90"><span class="ft1"> Traversing with the Workshop Applet</span></div>
<div style="position:absolute;top:1029;left:423"><span class="ft0"> </span></div>
<div style="position:absolute;top:1028;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1033;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1052;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1068;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1068;left:90"><span class="ft2"> To see what a traversal looks like with the Workshop applet, repeatedly press the Trav </span></div>
<div style="position:absolute;top:1068;left:640"><span class="ft0">  </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>