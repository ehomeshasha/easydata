<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0512</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft2{font-style:normal;font-weight:bold;font-size:16px;font-family:Arial;color:#010100;}
.ft3{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
.ft4{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#010100;}
.ft5{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#000000;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0512.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:391"><span class="ft0"> - 512 -</span></div>
<div style="position:absolute;top:81;left:90"><span class="ft1">them. Only when experimentation shows their performance to be too slow should you </span></div>
<div style="position:absolute;top:97;left:90"><span class="ft1">revert to more sophisticated data structures.</span></div>
<div style="position:absolute;top:94;left:361"><span class="ft0"> </span></div>
<div style="position:absolute;top:97;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:116;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:131;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:131;left:90"><span class="ft2"> References Are Faster</span></div>
<div style="position:absolute;top:131;left:267"><span class="ft0"> </span></div>
<div style="position:absolute;top:131;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:135;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:154;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:208;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:170;left:90"><span class="ft1"> Java has an advantage over some languages in the speed with which objects can be </span></div>
<div style="position:absolute;top:186;left:90"><span class="ft1">manipulated, because, in most data structures , Java stores only references, not actual </span></div>
<div style="position:absolute;top:202;left:90"><span class="ft1">objects. Therefore most algorithms will run faster than in languages where actual objects </span></div>
<div style="position:absolute;top:218;left:90"><span class="ft1">occupy space in a data structure. In analyzing the algorithms it's not the case, as when </span></div>
<div style="position:absolute;top:234;left:90"><span class="ft1">objects themselves are stored, that the time to &quot;move&quot; an object depends on the size of </span></div>
<div style="position:absolute;top:250;left:90"><span class="ft1">the object. Because only a reference is moved, it doesn't matter how large the object is.</span></div>
<div style="position:absolute;top:247;left:627"><span class="ft0"> </span></div>
<div style="position:absolute;top:208;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:250;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:269;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:299;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:285;left:90"><span class="ft1"> Of course in other languages, such as C++, pointers to objects can be stored instead of </span></div>
<div style="position:absolute;top:301;left:90"><span class="ft1">the objects themselves; this has the same effect as using references, but the syntax is </span></div>
<div style="position:absolute;top:317;left:90"><span class="ft1">more complicated.</span></div>
<div style="position:absolute;top:314;left:204"><span class="ft0"> </span></div>
<div style="position:absolute;top:299;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:317;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:336;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:353;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:352;left:90"><span class="ft3"> Libraries</span></div>
<div style="position:absolute;top:354;left:169"><span class="ft0"> </span></div>
<div style="position:absolute;top:353;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:358;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:377;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:415;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:393;left:90"><span class="ft1"> Libraries of data structures are available commercially in all major programming </span></div>
<div style="position:absolute;top:409;left:90"><span class="ft1">languages. Languages themselves may have some structures built in. Java, for example, </span></div>
<div style="position:absolute;top:425;left:90"><span class="ft1">includes </span></div>
<div style="position:absolute;top:425;left:145"><span class="ft4">Vector</span></div>
<div style="position:absolute;top:425;left:195"><span class="ft1">, </span></div>
<div style="position:absolute;top:425;left:203"><span class="ft4">Stack</span></div>
<div style="position:absolute;top:425;left:244"><span class="ft1">, and </span></div>
<div style="position:absolute;top:425;left:279"><span class="ft4">Hashtable</span></div>
<div style="position:absolute;top:425;left:358"><span class="ft1"> classes. C++ includes the Standard Template </span></div>
<div style="position:absolute;top:442;left:90"><span class="ft1">Library (STL), which contains classes for many data structures and algorithms.</span></div>
<div style="position:absolute;top:439;left:573"><span class="ft0"> </span></div>
<div style="position:absolute;top:415;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:442;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:461;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:507;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:477;left:90"><span class="ft1"> Using a commercial library may eliminate or at least reduce the programming necessary </span></div>
<div style="position:absolute;top:493;left:90"><span class="ft1">to create the data structures described in this book. When that's the case, using a </span></div>
<div style="position:absolute;top:509;left:90"><span class="ft1">complex structure such as a balanced tree, or a delicate algorithm such as quicksort, </span></div>
<div style="position:absolute;top:525;left:90"><span class="ft1">becomes a more attractive possibility. However, you must ensure that the class can be </span></div>
<div style="position:absolute;top:541;left:90"><span class="ft1">adapted to your particular situation.</span></div>
<div style="position:absolute;top:538;left:307"><span class="ft0"> </span></div>
<div style="position:absolute;top:507;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:541;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:560;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:577;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:576;left:90"><span class="ft3"> Arrays</span></div>
<div style="position:absolute;top:578;left:150"><span class="ft0"> </span></div>
<div style="position:absolute;top:577;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:582;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:601;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:623;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:617;left:90"><span class="ft1"> In many situations the array is the first kind of structure you should consider when storing </span></div>
<div style="position:absolute;top:633;left:90"><span class="ft1">and manipulating data. Arrays are useful when</span></div>
<div style="position:absolute;top:630;left:377"><span class="ft0"> </span></div>
<div style="position:absolute;top:623;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:633;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:652;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:667;left:79"><span class="ft0">  </span></div>
<div style="position:absolute;top:668;left:90"><span class="ft1"> .</span></div>
<div style="position:absolute;top:665;left:95"><span class="ft0">   </span></div>
<div style="position:absolute;top:668;left:107"><span class="ft5">The amount of data is reasonably small.</span></div>
<div style="position:absolute;top:665;left:354"><span class="ft0"> </span></div>
<div style="position:absolute;top:667;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:671;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:690;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:706;left:79"><span class="ft0">  </span></div>
<div style="position:absolute;top:706;left:90"><span class="ft1"> .</span></div>
<div style="position:absolute;top:703;left:95"><span class="ft0">   </span></div>
<div style="position:absolute;top:706;left:107"><span class="ft5">The amount of data is predictable in advance.</span></div>
<div style="position:absolute;top:703;left:388"><span class="ft0"> </span></div>
<div style="position:absolute;top:706;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:710;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:729;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:750;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:745;left:90"><span class="ft1"> If you have plenty of memory, you can relax the second condition; just make the array big </span></div>
<div style="position:absolute;top:761;left:90"><span class="ft1">enough to handle any foreseeable influx of data.</span></div>
<div style="position:absolute;top:758;left:387"><span class="ft0"> </span></div>
<div style="position:absolute;top:750;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:761;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:780;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:817;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:796;left:90"><span class="ft1"> If insertion speed is important, use an unordered array. If search speed is important, use </span></div>
<div style="position:absolute;top:812;left:90"><span class="ft1">an ordered array with a binary search. Deletion is always slow in arrays because an </span></div>
<div style="position:absolute;top:828;left:90"><span class="ft1">average of half the items must be moved to fill in the newly vacated cell. Traversal is fast </span></div>
<div style="position:absolute;top:844;left:90"><span class="ft1">in an ordered array but not supported in an unordered array.</span></div>
<div style="position:absolute;top:841;left:460"><span class="ft0"> </span></div>
<div style="position:absolute;top:817;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:844;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:863;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:901;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:879;left:90"><span class="ft1"> Vectors, such as the </span></div>
<div style="position:absolute;top:879;left:220"><span class="ft4">Vector</span></div>
<div style="position:absolute;top:879;left:270"><span class="ft1"> class supplied with Java, are arrays that expand </span></div>
<div style="position:absolute;top:896;left:90"><span class="ft1">themselves when they become too full. Vectors may work when the amount of data isn't </span></div>
<div style="position:absolute;top:912;left:90"><span class="ft1">known in advance. However, there may periodically be a significant pause while they </span></div>
<div style="position:absolute;top:928;left:90"><span class="ft1">enlarge themselves by copying the old data into the new space.</span></div>
<div style="position:absolute;top:925;left:481"><span class="ft0"> </span></div>
<div style="position:absolute;top:901;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:928;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:947;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:964;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:963;left:90"><span class="ft3"> Linked lists</span></div>
<div style="position:absolute;top:965;left:193"><span class="ft0"> </span></div>
<div style="position:absolute;top:964;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:969;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:988;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1026;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1004;left:90"><span class="ft1"> Consider a linked list whenever the amount of data to be stored cannot be predicted in </span></div>
<div style="position:absolute;top:1020;left:90"><span class="ft1">advance or when data will frequently be inserted and deleted. The linked list obtains </span></div>
<div style="position:absolute;top:1036;left:90"><span class="ft1">whatever storage it needs as new items are added, so it can expand to fill all of available </span></div>
<div style="position:absolute;top:1052;left:90"><span class="ft1">memory; and there is no need to fill &quot;holes&quot; during deletion, as there is in arrays.</span></div>
<div style="position:absolute;top:1049;left:582"><span class="ft0"> </span></div>
<div style="position:absolute;top:1026;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1052;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1071;left:80"><span class="ft0"> </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>