<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0431</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#010100;}
.ft2{font-style:normal;font-weight:bold;font-size:16px;font-family:Arial;color:#010100;}
.ft3{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft4{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0431.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:391"><span class="ft0"> - 431 -</span></div>
<div style="position:absolute;top:80;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:80;left:113"><span class="ft1">    theHeap.trickleDown(j);</span></div>
<div style="position:absolute;top:77;left:330"><span class="ft0"> </span></div>
<div style="position:absolute;top:80;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:84;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:103;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:118;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:119;left:90"><span class="ft2"> A Recursive Approach</span></div>
<div style="position:absolute;top:119;left:269"><span class="ft0"> </span></div>
<div style="position:absolute;top:118;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:122;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:141;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:180;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:158;left:90"><span class="ft3"> A recursive approach can also be used to form a heap from an array. A </span></div>
<div style="position:absolute;top:158;left:531"><span class="ft1">heapify()</span></div>
<div style="position:absolute;top:158;left:606"><span class="ft3"> </span></div>
<div style="position:absolute;top:174;left:90"><span class="ft3">method is applied to the root. It calls itself for the root's two children, then for each of </span></div>
<div style="position:absolute;top:190;left:90"><span class="ft3">these children's two children, and so on. Eventually it works its way down to the bottom </span></div>
<div style="position:absolute;top:206;left:90"><span class="ft3">row, where it returns immediately whenever it finds a node with no children.</span></div>
<div style="position:absolute;top:203;left:553"><span class="ft0"> </span></div>
<div style="position:absolute;top:180;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:206;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:226;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:257;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:242;left:90"><span class="ft3"> Once it has called itself for two child subtrees, </span></div>
<div style="position:absolute;top:242;left:376"><span class="ft1">heapify()</span></div>
<div style="position:absolute;top:242;left:451"><span class="ft3"> then applies </span></div>
<div style="position:absolute;top:242;left:534"><span class="ft1">trickleDo </span></div>
<div style="position:absolute;top:259;left:90"><span class="ft1">n()</span></div>
<div style="position:absolute;top:259;left:115"><span class="ft3"> to the root of the subtree. This ensures that the subtree is a correct heap. Then </span></div>
<div style="position:absolute;top:276;left:90"><span class="ft1">heapify()</span></div>
<div style="position:absolute;top:276;left:165"><span class="ft3"> returns and works on the subtree one level higher.</span></div>
<div style="position:absolute;top:273;left:478"><span class="ft0"> </span></div>
<div style="position:absolute;top:257;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:277;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:296;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:312;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:311;left:113"><span class="ft1"> heapify(int index)      // transform array into heap</span></div>
<div style="position:absolute;top:308;left:546"><span class="ft0"> </span></div>
<div style="position:absolute;top:312;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:316;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:331;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:330;left:113"><span class="ft1">    {</span></div>
<div style="position:absolute;top:327;left:147"><span class="ft0"> </span></div>
<div style="position:absolute;top:331;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:335;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:350;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:350;left:113"><span class="ft1">    if(index &gt; N/2-1)    // if node has no children,</span></div>
<div style="position:absolute;top:347;left:538"><span class="ft0"> </span></div>
<div style="position:absolute;top:350;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:354;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:369;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:369;left:113"><span class="ft1">       return;           //    return</span></div>
<div style="position:absolute;top:366;left:413"><span class="ft0"> </span></div>
<div style="position:absolute;top:369;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:373;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:388;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:388;left:113"><span class="ft1">    heapify(index*2+2);  // turn right subtree into heap</span></div>
<div style="position:absolute;top:385;left:571"><span class="ft0"> </span></div>
<div style="position:absolute;top:388;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:392;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:408;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:407;left:113"><span class="ft1">    heapify(index*2+1);  // turn left subtree into heap</span></div>
<div style="position:absolute;top:404;left:563"><span class="ft0"> </span></div>
<div style="position:absolute;top:408;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:411;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:427;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:426;left:113"><span class="ft1">    trickleDown(index);  // apply trickle-down to this node</span></div>
<div style="position:absolute;top:423;left:596"><span class="ft0">   </span></div>
<div style="position:absolute;top:431;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:450;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:465;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:465;left:113"><span class="ft1">    }</span></div>
<div style="position:absolute;top:462;left:147"><span class="ft0"> </span></div>
<div style="position:absolute;top:465;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:469;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:488;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:503;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:504;left:90"><span class="ft3"> This recursive approach is probably not quite as efficient as the simple loop.</span></div>
<div style="position:absolute;top:501;left:557"><span class="ft0"> </span></div>
<div style="position:absolute;top:503;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:507;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:526;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:543;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:542;left:90"><span class="ft4"> Using the Same Array</span></div>
<div style="position:absolute;top:544;left:285"><span class="ft0"> </span></div>
<div style="position:absolute;top:543;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:548;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:567;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:605;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:583;left:90"><span class="ft3"> Our initial code fragment showed unordered data in an array. This data was then inserted </span></div>
<div style="position:absolute;top:599;left:90"><span class="ft3">into a heap, and finally removed from the heap and written back to the array in sorted </span></div>
<div style="position:absolute;top:615;left:90"><span class="ft3">order. In this procedure two size-N arrays are required: the initial array and the array </span></div>
<div style="position:absolute;top:631;left:90"><span class="ft3">used by the heap.</span></div>
<div style="position:absolute;top:628;left:201"><span class="ft0"> </span></div>
<div style="position:absolute;top:605;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:631;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:650;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:680;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:666;left:90"><span class="ft3"> In fact, the same array can be used both for the heap and for the initial array. This cuts in </span></div>
<div style="position:absolute;top:682;left:90"><span class="ft3">half the amount of memory needed for heapsort; no memory beyond the initial array is </span></div>
<div style="position:absolute;top:698;left:90"><span class="ft3">necessary.</span></div>
<div style="position:absolute;top:695;left:157"><span class="ft0"> </span></div>
<div style="position:absolute;top:680;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:698;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:717;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:755;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:734;left:90"><span class="ft3"> We've already seen how </span></div>
<div style="position:absolute;top:734;left:245"><span class="ft1">trickleDown()</span></div>
<div style="position:absolute;top:734;left:353"><span class="ft3"> can be applied to half the elements of an </span></div>
<div style="position:absolute;top:750;left:90"><span class="ft3">array to transform them into a heap. We  transform the unordered array data into a heap </span></div>
<div style="position:absolute;top:766;left:90"><span class="ft3">in place; only one array is necessary for this. Thus the first step in heapsort requires only </span></div>
<div style="position:absolute;top:782;left:90"><span class="ft3">one array.</span></div>
<div style="position:absolute;top:779;left:153"><span class="ft0"> </span></div>
<div style="position:absolute;top:755;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:782;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:801;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:824;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:818;left:90"><span class="ft3"> However, things are more complicated when we apply </span></div>
<div style="position:absolute;top:818;left:427"><span class="ft1">remove()</span></div>
<div style="position:absolute;top:818;left:497"><span class="ft3"> repeatedly to the heap. </span></div>
<div style="position:absolute;top:835;left:90"><span class="ft3">Where are we going to put the items that are removed.</span></div>
<div style="position:absolute;top:832;left:430"><span class="ft0"> </span></div>
<div style="position:absolute;top:824;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:835;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:854;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:908;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:870;left:90"><span class="ft3"> Each time an item is removed from the heap, an element at the end of the heap array </span></div>
<div style="position:absolute;top:886;left:90"><span class="ft3">becomes empty; the heap shrinks by one. We can put the recently removed item in this </span></div>
<div style="position:absolute;top:902;left:90"><span class="ft3">newly freed cell. As more items are removed, the heap array becomes smaller and </span></div>
<div style="position:absolute;top:918;left:90"><span class="ft3">smaller, while the array of ordered data becomes larger and larger. Thus with a little </span></div>
<div style="position:absolute;top:934;left:90"><span class="ft3">planning it's possible for the ordered array and the heap array to share the same space. </span></div>
<div style="position:absolute;top:950;left:90"><span class="ft3">This is shown in Figure 12.10.</span></div>
<div style="position:absolute;top:947;left:275"><span class="ft0"> </span></div>
<div style="position:absolute;top:908;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:950;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:969;left:80"><span class="ft0"> </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>