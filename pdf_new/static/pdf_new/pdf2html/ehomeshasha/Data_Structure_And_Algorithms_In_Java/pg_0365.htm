<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0365</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft2{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#000000;}
.ft3{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#008000;}
.ft4{font-style:normal;font-weight:bold;font-size:16px;font-family:Arial;color:#010100;}
.ft5{font-style:normal;font-weight:normal;font-size:10px;font-family:Arial;color:#010100;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0365.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:391"><span class="ft0"> - 365 -</span></div>
<div style="position:absolute;top:84;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:130;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:100;left:90"><span class="ft1"> Figure 10.20-a</span></div>
<div style="position:absolute;top:100;left:181"><span class="ft2"> shows a root node that's already full; items with keys 20, 40, 60, and 80 </span></div>
<div style="position:absolute;top:116;left:90"><span class="ft2">have already been inserted into the tree. A new data item with a key of 70 is inserted, </span></div>
<div style="position:absolute;top:132;left:90"><span class="ft2">resulting in a node split. Here's how the split is accomplished. Because it's the root that's </span></div>
<div style="position:absolute;top:148;left:90"><span class="ft2">being split, two new nodes are created (as in a 2-3-4 tree): a new root and a new node to </span></div>
<div style="position:absolute;top:164;left:90"><span class="ft2">the right of the one being split.</span></div>
<div style="position:absolute;top:161;left:276"><span class="ft0"> </span></div>
<div style="position:absolute;top:130;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:164;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:183;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:221;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:199;left:90"><span class="ft1"> To decide where the data items go, the insertion algorithm arranges their 5 keys in order, </span></div>
<div style="position:absolute;top:215;left:90"><span class="ft1">in an internal buffer. Four of these keys are from the node being split, and the fifth is from </span></div>
<div style="position:absolute;top:231;left:90"><span class="ft1">the new item being inserted. In Figure 10.20</span></div>
<div style="position:absolute;top:231;left:361"><span class="ft2">, these 5-item sequences are shown to the </span></div>
<div style="position:absolute;top:247;left:90"><span class="ft2">side of the tree. In this first step the sequence 20, 40, 60, 70, 80 is shown.</span></div>
<div style="position:absolute;top:244;left:544"><span class="ft0"> </span></div>
<div style="position:absolute;top:221;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:247;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:266;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:312;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:282;left:90"><span class="ft1"> The center item in this sequence, 60 in this first step, is promoted to the new root node. </span></div>
<div style="position:absolute;top:298;left:90"><span class="ft1">(In the figure, an arrow indicates that the center item will go upward.) All the items to the </span></div>
<div style="position:absolute;top:314;left:90"><span class="ft1">left of center remain in the node being split, and all the items to the right go into the new </span></div>
<div style="position:absolute;top:330;left:90"><span class="ft1">right-hand node. The result is shown in Figure 10.20-b</span></div>
<div style="position:absolute;top:330;left:424"><span class="ft2">. (In our phone book example, 8 </span></div>
<div style="position:absolute;top:346;left:90"><span class="ft2">items would go into each child node, rather than the 2 shown in the figure.)</span></div>
<div style="position:absolute;top:343;left:549"><span class="ft0"> </span></div>
<div style="position:absolute;top:312;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:346;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:365;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:395;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:381;left:90"><span class="ft1"> In Figure 10.20-b</span></div>
<div style="position:absolute;top:381;left:196"><span class="ft2"> we insert two more items, 10 and 30. They fill up the left child, as </span></div>
<div style="position:absolute;top:397;left:90"><span class="ft2">shown in </span></div>
<div style="position:absolute;top:397;left:149"><span class="ft1">Figure 10.20-c</span></div>
<div style="position:absolute;top:397;left:239"><span class="ft2">. The next item to be inserted, 15, splits this left child, with the </span></div>
<div style="position:absolute;top:413;left:90"><span class="ft2">result shown in </span></div>
<div style="position:absolute;top:413;left:187"><span class="ft1">Figure 10.20-d</span></div>
<div style="position:absolute;top:413;left:277"><span class="ft2">. Here the 20 has been promoted upward into the root.</span></div>
<div style="position:absolute;top:410;left:611"><span class="ft0">   </span></div>
<div style="position:absolute;top:413;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:432;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:462;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:448;left:90"><span class="ft1"> Next, three items, 75, 85, and 90, are inserted into the tree. The first two fill up the third </span></div>
<div style="position:absolute;top:464;left:90"><span class="ft1">child, and the third splits it, causing the creation of a new node and the promotion of the </span></div>
<div style="position:absolute;top:480;left:90"><span class="ft1">middle item, 80, to the root. The result is shown in Figure 10.20-e</span></div>
<div style="position:absolute;top:480;left:491"><span class="ft2">.</span></div>
<div style="position:absolute;top:477;left:495"><span class="ft0"> </span></div>
<div style="position:absolute;top:462;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:480;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:499;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:529;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:515;left:90"><span class="ft1"> Again three items, 25, 35, and 50, are added to the tree. The first two items fill up the </span></div>
<div style="position:absolute;top:531;left:90"><span class="ft1">second child, and the third one splits it, causing the creation of a new node and the </span></div>
<div style="position:absolute;top:547;left:90"><span class="ft1">promotion of the middle item, 35, to the root, as shown in Figure 10.20-f.</span></div>
<div style="position:absolute;top:544;left:534"><span class="ft0"> </span></div>
<div style="position:absolute;top:529;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:547;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:566;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:604;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:582;left:90"><span class="ft1"> Now the root is full. However, subsequent insertions don't necessarily cause a node split, </span></div>
<div style="position:absolute;top:598;left:90"><span class="ft1">because nodes are split only when a new item is inserted into a full node, not when a full </span></div>
<div style="position:absolute;top:614;left:90"><span class="ft1">node is encountered in the search down the tree. Thus 22 and 27 are inserted in the </span></div>
<div style="position:absolute;top:630;left:90"><span class="ft1">second child without causing any splits, as shown in  Figure 10.20-g</span></div>
<div style="position:absolute;top:630;left:508"><span class="ft3">.</span></div>
<div style="position:absolute;top:627;left:512"><span class="ft0"> </span></div>
<div style="position:absolute;top:604;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:630;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:649;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:687;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:665;left:90"><span class="ft1"> However, the next item to be inserted, 32, does cause a split; in fact it causes two of </span></div>
<div style="position:absolute;top:681;left:90"><span class="ft1">them. The second node child is full, so it's split, as shown in Figure 10.20-b</span></div>
<div style="position:absolute;top:681;left:551"><span class="ft2">. However, the </span></div>
<div style="position:absolute;top:697;left:90"><span class="ft2">27, promoted from this split, has no place to go because the root is full. Therefore, the </span></div>
<div style="position:absolute;top:713;left:90"><span class="ft2">root must be split as well, resulting in the arrangement of </span></div>
<div style="position:absolute;top:713;left:442"><span class="ft1">Figure 10.20-j</span></div>
<div style="position:absolute;top:713;left:528"><span class="ft2">.</span></div>
<div style="position:absolute;top:710;left:532"><span class="ft0"> </span></div>
<div style="position:absolute;top:687;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:713;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:732;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:762;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:748;left:90"><span class="ft1"> Notice that throughout the insertion process no node (except the root) is ever less than </span></div>
<div style="position:absolute;top:764;left:90"><span class="ft1">half full, and many are more than half full. As we noted, this promotes efficiency because </span></div>
<div style="position:absolute;top:780;left:90"><span class="ft1">a file access that reads a node always acquires a substantial amount of data.</span></div>
<div style="position:absolute;top:777;left:563"><span class="ft0"> </span></div>
<div style="position:absolute;top:762;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:780;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:799;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:815;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:815;left:90"><span class="ft4"> Efficiency of B-Trees</span></div>
<div style="position:absolute;top:815;left:256"><span class="ft0"> </span></div>
<div style="position:absolute;top:815;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:819;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:838;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:891;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:854;left:90"><span class="ft1"> Because there are so many records per node, and so many nodes per level, operations </span></div>
<div style="position:absolute;top:870;left:90"><span class="ft1">on B-trees are very fast, considering that the data is stored on disk. In our phone book </span></div>
<div style="position:absolute;top:885;left:90"><span class="ft1">example there are 500,000 records. All the nodes in the B-tree are at least half full, so </span></div>
<div style="position:absolute;top:901;left:90"><span class="ft1">they contain at least 8 records and 9 links to children. The height of the tree is thus </span></div>
<div style="position:absolute;top:917;left:90"><span class="ft1">somewhat less than log</span></div>
<div style="position:absolute;top:920;left:235"><span class="ft5">9</span></div>
<div style="position:absolute;top:917;left:241"><span class="ft1">N (logarithm to the base 9 of N), where N is 500,000. This is </span></div>
<div style="position:absolute;top:933;left:90"><span class="ft1">5.972, so there will be about 6 levels in the tree.</span></div>
<div style="position:absolute;top:930;left:384"><span class="ft0"> </span></div>
<div style="position:absolute;top:891;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:934;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:953;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:990;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:969;left:90"><span class="ft1"> Thus, using a B-tree, only six disk accesses are necessary to find any record in a file of </span></div>
<div style="position:absolute;top:984;left:90"><span class="ft1">500,000 records. At 10 milliseconds per access, this takes about 60 milliseconds, or </span></div>
<div style="position:absolute;top:1000;left:90"><span class="ft1">6/100 of a second. This is dramatically faster than the binary search of a sequentially </span></div>
<div style="position:absolute;top:1016;left:90"><span class="ft1">ordered file.</span></div>
<div style="position:absolute;top:1013;left:164"><span class="ft0"> </span></div>
<div style="position:absolute;top:990;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1017;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1036;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1057;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1052;left:90"><span class="ft1"> The more records there are in a node, the fewer levels there are in the tree. We've seen </span></div>
<div style="position:absolute;top:1068;left:90"><span class="ft1">that there are 6 levels in our B-tree, even though the nodes hold only 16 records. In </span></div>
<div style="position:absolute;top:1057;left:640"><span class="ft0">  </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>