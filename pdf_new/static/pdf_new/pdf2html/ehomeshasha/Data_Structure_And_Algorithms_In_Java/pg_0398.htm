<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0398</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft2{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#010100;}
.ft3{font-style:normal;font-weight:bold;font-size:16px;font-family:Arial;color:#010100;}
.ft4{font-style:normal;font-weight:bold;font-size:16px;font-family:Verdana;color:#000000;}
.ft5{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#000080;}
.ft6{font-style:normal;font-weight:bold;font-size:13px;font-family:Arial;color:#010100;}
.ft7{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#000000;}
.ft8{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0398.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:391"><span class="ft0"> - 398 -</span></div>
<div style="position:absolute;top:84;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:114;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:100;left:90"><span class="ft1"> The first 15 keys mostly hash to a vacant cell (the 10th one is an anomaly). After that, as </span></div>
<div style="position:absolute;top:116;left:90"><span class="ft1">the array gets more full, the probe sequences become quite long. Here's the resulting </span></div>
<div style="position:absolute;top:132;left:90"><span class="ft1">array of keys:</span></div>
<div style="position:absolute;top:129;left:174"><span class="ft0"> </span></div>
<div style="position:absolute;top:114;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:132;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:151;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:166;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:167;left:113"><span class="ft2"> ** 1 24 3 15 5 25 30 31 16 10 11 12 1 37 38 16 36 18 19 20 ** 41</span></div>
<div style="position:absolute;top:164;left:481"><span class="ft0"> </span></div>
<div style="position:absolute;top:166;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:170;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:189;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:205;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:205;left:90"><span class="ft3"> Table Size a Prime Number</span></div>
<div style="position:absolute;top:205;left:304"><span class="ft0"> </span></div>
<div style="position:absolute;top:205;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:208;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:228;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:289;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:243;left:90"><span class="ft1"> Double hashing requires that the size of the hash table is a prime number. To see why, </span></div>
<div style="position:absolute;top:259;left:90"><span class="ft1">imagine a situation where the table size is not a prime number. For example, suppose the </span></div>
<div style="position:absolute;top:275;left:90"><span class="ft1">array size is 15 (indices from 0 to 14), and that a particular key hashes to an initial index </span></div>
<div style="position:absolute;top:291;left:90"><span class="ft1">of 0 and a step size of 5. The probe sequence will be 0, 5, 10, 0, 5, 10, and so on, </span></div>
<div style="position:absolute;top:307;left:90"><span class="ft1">repeating endlessly. Only these three cells are ever examined, so the algorithm will never </span></div>
<div style="position:absolute;top:323;left:90"><span class="ft1">find the empty cells that might be waiting at 1, 2, 3, and so on. The algorithm will crash </span></div>
<div style="position:absolute;top:339;left:90"><span class="ft1">and burn.</span></div>
<div style="position:absolute;top:336;left:149"><span class="ft0"> </span></div>
<div style="position:absolute;top:289;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:339;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:358;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:396;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:374;left:90"><span class="ft1"> If the array size were 13, which is prime, the probe sequence eventually visits every cell. </span></div>
<div style="position:absolute;top:390;left:90"><span class="ft1">It's 0, 5, 10, 2, 7, 12, 4, 9, 1, 6, 11, 3, and so on and on. If there is even one empty cell, </span></div>
<div style="position:absolute;top:406;left:90"><span class="ft1">the probe will find it. Using a prime number as the array size makes it impossible for any </span></div>
<div style="position:absolute;top:422;left:90"><span class="ft1">number to divide it evenly, so the probe sequence will eventually check every cell.</span></div>
<div style="position:absolute;top:419;left:593"><span class="ft0"> </span></div>
<div style="position:absolute;top:396;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:422;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:442;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:471;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:457;left:90"><span class="ft1"> A similar effect occurs using the quadratic probe. In that case, however, the step size </span></div>
<div style="position:absolute;top:473;left:90"><span class="ft1">gets larger with each step, and will eventually overflow the variable holding it, thus </span></div>
<div style="position:absolute;top:489;left:90"><span class="ft1">preventing an endless loop.</span></div>
<div style="position:absolute;top:486;left:260"><span class="ft0"> </span></div>
<div style="position:absolute;top:471;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:490;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:509;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:524;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:525;left:90"><span class="ft1"> In general, double hashing is the probe sequence of choice when open addressing is used.</span></div>
<div style="position:absolute;top:522;left:649"><span class="ft0"> </span></div>
<div style="position:absolute;top:528;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:545;left:79"><span class="ft4"> </span></div>
<div style="position:absolute;top:565;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:564;left:90"><span class="ft5"> Separate Chaining</span></div>
<div style="position:absolute;top:566;left:255"><span class="ft0"> </span></div>
<div style="position:absolute;top:565;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:570;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:589;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:643;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:605;left:90"><span class="ft1"> In open addressing, collisions are resolved by looking for an open cell in the hash table. </span></div>
<div style="position:absolute;top:621;left:90"><span class="ft1">A different approach is to install a linked list at each index in the hash table. A data item's </span></div>
<div style="position:absolute;top:637;left:90"><span class="ft1">key is hashed to the index in the usual way, and the item is inserted into the linked list at </span></div>
<div style="position:absolute;top:653;left:90"><span class="ft1">that index. Other items that hash to the same index are simply added to the linked list; </span></div>
<div style="position:absolute;top:669;left:90"><span class="ft1">there's no need to search for empty cells in the primary array. Figure 11.10 shows how </span></div>
<div style="position:absolute;top:685;left:90"><span class="ft1">separate chaining looks.</span></div>
<div style="position:absolute;top:682;left:240"><span class="ft0"> </span></div>
<div style="position:absolute;top:643;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:685;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:704;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:801;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:887;left:355"><span class="ft0">  </span></div>
<div style="position:absolute;top:801;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:887;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:906;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:922;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:922;left:136"><span class="ft6"> Figure 11.10:  eparate chaining</span></div>
<div style="position:absolute;top:919;left:332"><span class="ft0"> </span></div>
<div style="position:absolute;top:922;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:945;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:943;left:136"><span class="ft7">  </span></div>
<div style="position:absolute;top:943;left:640"><span class="ft7">  </span></div>
<div style="position:absolute;top:945;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:964;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:993;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:980;left:90"><span class="ft1"> Separate chaining is conceptually somewhat simpler than the various probe schemes </span></div>
<div style="position:absolute;top:996;left:90"><span class="ft1">used in open addressing. However, the code is longer because it must include the </span></div>
<div style="position:absolute;top:1012;left:90"><span class="ft1">mechanism for the linked lists, usually in the form of an additional class.</span></div>
<div style="position:absolute;top:1009;left:530"><span class="ft0"> </span></div>
<div style="position:absolute;top:993;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1012;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1031;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1047;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1046;left:90"><span class="ft8"> The HashChain Workshop Applet</span></div>
<div style="position:absolute;top:1048;left:387"><span class="ft0"> </span></div>
<div style="position:absolute;top:1047;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1052;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1072;left:80"><span class="ft0"> </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>