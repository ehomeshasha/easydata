<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0257</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft2{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#010100;}
.ft3{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
.ft4{font-style:normal;font-weight:bold;font-size:16px;font-family:Verdana;color:#000000;}
.ft5{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#000080;}
.ft6{font-style:italic;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0257.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:391"><span class="ft0"> - 257 -</span></div>
<div style="position:absolute;top:81;left:90"><span class="ft1">is satisfied. The pointers must move in any case, so two extra statements within the outer </span></div>
<div style="position:absolute;top:97;left:90"><span class="ft2">while</span></div>
<div style="position:absolute;top:97;left:132"><span class="ft1"> loop would be required to bump the pointers. The nop version is the most efficient </span></div>
<div style="position:absolute;top:114;left:90"><span class="ft1">solution.</span></div>
<div style="position:absolute;top:111;left:142"><span class="ft0"> </span></div>
<div style="position:absolute;top:114;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:133;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:150;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:149;left:90"><span class="ft3"> Efficiency of the Partition Algorithm</span></div>
<div style="position:absolute;top:151;left:410"><span class="ft0"> </span></div>
<div style="position:absolute;top:150;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:155;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:174;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:235;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:190;left:90"><span class="ft1"> The partition algorithm runs in O(N) time. It's easy to see this when running the Partition </span></div>
<div style="position:absolute;top:206;left:90"><span class="ft1">Workshop applet: the two pointers start at opposite ends of the array and move toward </span></div>
<div style="position:absolute;top:222;left:90"><span class="ft1">each other at a more or less constant rate, stopping and swapping as they go. When they </span></div>
<div style="position:absolute;top:237;left:90"><span class="ft1">meet, the partition is complete. If there were twice as many items to partition, the pointers </span></div>
<div style="position:absolute;top:253;left:90"><span class="ft1">would move at the same rate, but they would have twice as far to go (twice as many </span></div>
<div style="position:absolute;top:269;left:90"><span class="ft1">items to compare and swap), so the process would take twice as long. Thus the running </span></div>
<div style="position:absolute;top:285;left:90"><span class="ft1">time is proportional to N.</span></div>
<div style="position:absolute;top:282;left:241"><span class="ft0"> </span></div>
<div style="position:absolute;top:235;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:286;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:305;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:366;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:321;left:90"><span class="ft1"> More specifically, for each partition there will be N+1 or N+2 comparisons. Every item will </span></div>
<div style="position:absolute;top:337;left:90"><span class="ft1">be encountered and used in a comparison by one or the other of the pointers, leading to </span></div>
<div style="position:absolute;top:352;left:90"><span class="ft1">N comparisons, but the pointers overshoot each other before they find out they've </span></div>
<div style="position:absolute;top:368;left:90"><span class="ft1">&quot;crossed&quot; or gone beyond each other, so there are one or two extra comparisons before </span></div>
<div style="position:absolute;top:384;left:90"><span class="ft1">the partition is complete. The number of comparisons is independent of how the data is </span></div>
<div style="position:absolute;top:400;left:90"><span class="ft1">arranged (except for the uncertainty between 1 and 2 extra comparisons at the end of the </span></div>
<div style="position:absolute;top:416;left:90"><span class="ft1">scan).</span></div>
<div style="position:absolute;top:413;left:128"><span class="ft0"> </span></div>
<div style="position:absolute;top:366;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:416;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:436;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:481;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:451;left:90"><span class="ft1"> The number of swaps, however, does depend on how the data is arranged. If it's </span></div>
<div style="position:absolute;top:467;left:90"><span class="ft1">inversely ordered and the pivot value divides the items in half, then every pair of values </span></div>
<div style="position:absolute;top:483;left:90"><span class="ft1">must be swapped, which is N/2 swaps. (Remember in the Partition Workshop applet that </span></div>
<div style="position:absolute;top:499;left:90"><span class="ft1">the pivot value is selected randomly, so that the number of swaps for inversely sorted </span></div>
<div style="position:absolute;top:515;left:90"><span class="ft1">bars won't always be exactly N/2.)</span></div>
<div style="position:absolute;top:512;left:300"><span class="ft0"> </span></div>
<div style="position:absolute;top:481;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:516;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:535;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:588;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:551;left:90"><span class="ft1"> For random data, there will be fewer than N/2 swaps in a partition, even if the pivot value </span></div>
<div style="position:absolute;top:566;left:90"><span class="ft1">is such that half the bars are shorter and half are taller. This is because some bars will </span></div>
<div style="position:absolute;top:582;left:90"><span class="ft1">already be in the right place (short bars on the left, tall bars on the right). If the pivot value </span></div>
<div style="position:absolute;top:598;left:90"><span class="ft1">is higher (or lower) than most of the bars, there will be even fewer swaps because only </span></div>
<div style="position:absolute;top:614;left:90"><span class="ft1">those few bars that are higher (or lower) than the pivot will need to be swapped. On </span></div>
<div style="position:absolute;top:630;left:90"><span class="ft1">average, for random data, about half the maximum number of swaps take place.</span></div>
<div style="position:absolute;top:627;left:583"><span class="ft0"> </span></div>
<div style="position:absolute;top:588;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:631;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:650;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:687;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:666;left:90"><span class="ft1"> Although there are fewer swaps than comparisons, they are both proportional to N. Thus </span></div>
<div style="position:absolute;top:681;left:90"><span class="ft1">the partitioning process runs in O(N) time. Running the Workshop applet, you can see that </span></div>
<div style="position:absolute;top:697;left:90"><span class="ft1">for 12 random bars there are about 3 swaps and 14 comparisons, and for 100 random bars </span></div>
<div style="position:absolute;top:713;left:90"><span class="ft1">there are about 25 swaps and 102 comparisons. </span></div>
<div style="position:absolute;top:710;left:392"><span class="ft0"> </span></div>
<div style="position:absolute;top:714;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:730;left:79"><span class="ft4"> </span></div>
<div style="position:absolute;top:749;left:79"><span class="ft5">Quicksort</span></div>
<div style="position:absolute;top:751;left:166"><span class="ft0"> </span></div>
<div style="position:absolute;top:750;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:755;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:774;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:812;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:790;left:90"><span class="ft1"> Quicksort is undoubtedly the most popular sorting algorithm, and for good reason: in the </span></div>
<div style="position:absolute;top:806;left:90"><span class="ft1">majority of situations, it's the fastest, operating in O(N*logN) time. (This is only true for </span></div>
<div style="position:absolute;top:822;left:90"><span class="ft6">internal or in-memory sorting; for sorting data in disk files other methods may be better.) </span></div>
<div style="position:absolute;top:838;left:90"><span class="ft1">Quicksort was discovered by C.A.R. Hoare in 1962.</span></div>
<div style="position:absolute;top:835;left:407"><span class="ft0"> </span></div>
<div style="position:absolute;top:812;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:838;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:858;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:911;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:873;left:90"><span class="ft1"> To understand quicksort, you should be familiar with the partitioning algorithm described </span></div>
<div style="position:absolute;top:889;left:90"><span class="ft1">in the last section. Basically the quicksort algorithm operates by partitioning an array into </span></div>
<div style="position:absolute;top:905;left:90"><span class="ft1">two subarrays, and then calling itself to quicksort each of these subarrays. However, </span></div>
<div style="position:absolute;top:921;left:90"><span class="ft1">there are some embellishments we can make to this basic scheme. These have to do </span></div>
<div style="position:absolute;top:937;left:90"><span class="ft1">with the selection of the pivot and the sorting of small partitions. We'll examine these </span></div>
<div style="position:absolute;top:953;left:90"><span class="ft1">refinements after we've looked at a simple version of the main algorithm.</span></div>
<div style="position:absolute;top:950;left:535"><span class="ft0"> </span></div>
<div style="position:absolute;top:911;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:953;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:972;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1002;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:988;left:90"><span class="ft1"> It's difficult to understand what quicksort is doing before you understand how it does it, so </span></div>
<div style="position:absolute;top:1004;left:90"><span class="ft1">we'll reverse our usual presentation and show the Java code for quicksort before </span></div>
<div style="position:absolute;top:1020;left:90"><span class="ft1">presenting the quicksort Workshop applet.</span></div>
<div style="position:absolute;top:1017;left:350"><span class="ft0"> </span></div>
<div style="position:absolute;top:1002;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1020;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1040;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1056;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1055;left:90"><span class="ft3"> The Quicksort Algorithm</span></div>
<div style="position:absolute;top:1057;left:310"><span class="ft0"> </span></div>
<div style="position:absolute;top:1056;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1061;left:79"><span class="ft0"> </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>