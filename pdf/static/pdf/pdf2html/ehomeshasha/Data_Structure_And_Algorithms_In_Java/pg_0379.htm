<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0379</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft2{font-style:italic;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft3{font-style:normal;font-weight:bold;font-size:16px;font-family:Verdana;color:#000000;}
.ft4{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#000080;}
.ft5{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
.ft6{font-style:normal;font-weight:bold;font-size:16px;font-family:Arial;color:#010100;}
.ft7{font-style:normal;font-weight:bold;font-size:13px;font-family:Arial;color:#010100;}
.ft8{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#000000;}
.ft9{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#010100;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0379.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:391"><span class="ft0"> - 379 -</span></div>
<div style="position:absolute;top:84;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:106;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:100;left:90"><span class="ft1"> It may appear that the possibility of collisions renders the hashing scheme impractical, </span></div>
<div style="position:absolute;top:116;left:90"><span class="ft1">but in fact we can work around the problem in a variety of ways.</span></div>
<div style="position:absolute;top:113;left:482"><span class="ft0"> </span></div>
<div style="position:absolute;top:106;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:116;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:135;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:189;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:151;left:90"><span class="ft1"> Remember that we've specified an array with twice as many cells as data items. Thus </span></div>
<div style="position:absolute;top:167;left:90"><span class="ft1">perhaps half the cells are empty. One approach, when a collision occurs, is to search the </span></div>
<div style="position:absolute;top:183;left:90"><span class="ft1">array in some systematic way for an empty cell, and insert the new item there, instead of </span></div>
<div style="position:absolute;top:199;left:90"><span class="ft1">at the index specified by the hash function. This approach is called open addressing. If </span></div>
<div style="position:absolute;top:215;left:90"><span class="ft2">cats hashes to 5,421, but this location is already occupied by parsnip, then we might try </span></div>
<div style="position:absolute;top:231;left:90"><span class="ft1">to insert cats in 5,422, for example.</span></div>
<div style="position:absolute;top:228;left:306"><span class="ft0"> </span></div>
<div style="position:absolute;top:189;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:231;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:250;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:280;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:266;left:90"><span class="ft1"> A second approach (mentioned earlier) is to create an array that consists of linked lists of </span></div>
<div style="position:absolute;top:282;left:90"><span class="ft1">words instead of the words themselves. Then when a collision occurs, the new item is </span></div>
<div style="position:absolute;top:298;left:90"><span class="ft1">simply inserted in the list at that index. This is called separate chaining.</span></div>
<div style="position:absolute;top:295;left:526"><span class="ft0"> </span></div>
<div style="position:absolute;top:280;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:298;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:317;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:339;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:333;left:90"><span class="ft1"> In the balance of this chapter we'll discuss open addressing and separate chaining, and </span></div>
<div style="position:absolute;top:349;left:90"><span class="ft1">then return to the question of hash functions.</span></div>
<div style="position:absolute;top:346;left:365"><span class="ft0"> </span></div>
<div style="position:absolute;top:349;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:366;left:79"><span class="ft3"> </span></div>
<div style="position:absolute;top:385;left:79"><span class="ft4">Open Addressing</span></div>
<div style="position:absolute;top:387;left:235"><span class="ft0"> </span></div>
<div style="position:absolute;top:386;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:391;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:410;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:448;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:426;left:90"><span class="ft1"> In open addressing, when a data item can't be placed at the index calculated by the hash </span></div>
<div style="position:absolute;top:442;left:90"><span class="ft1">function, another location in the array is sought. We'll explore three methods of open </span></div>
<div style="position:absolute;top:458;left:90"><span class="ft1">addressing, which vary in the method used to find the next vacant cell. These methods </span></div>
<div style="position:absolute;top:474;left:90"><span class="ft1">are linear probing, quadratic probing, and double hashing.</span></div>
<div style="position:absolute;top:471;left:446"><span class="ft0"> </span></div>
<div style="position:absolute;top:448;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:474;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:493;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:510;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:509;left:90"><span class="ft5"> Linear Probing</span></div>
<div style="position:absolute;top:511;left:222"><span class="ft0"> </span></div>
<div style="position:absolute;top:510;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:515;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:534;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:571;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:550;left:90"><span class="ft1"> In linear probing we search sequentially for vacant cells. If 5,421 is occupied when we try </span></div>
<div style="position:absolute;top:566;left:90"><span class="ft1">to insert cats there, we go to 5,422, then 5,423, and so on, incrementing the index until </span></div>
<div style="position:absolute;top:582;left:90"><span class="ft1">we find an empty cell. This is called linear probing because it steps sequentially along the </span></div>
<div style="position:absolute;top:597;left:90"><span class="ft1">line of cells.</span></div>
<div style="position:absolute;top:594;left:163"><span class="ft0"> </span></div>
<div style="position:absolute;top:571;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:598;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:617;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:632;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:632;left:90"><span class="ft6"> The Hash Workshop Applet</span></div>
<div style="position:absolute;top:632;left:308"><span class="ft0"> </span></div>
<div style="position:absolute;top:632;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:636;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:655;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:677;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:671;left:90"><span class="ft1"> The Hash Workshop applet demonstrates linear probing. When you start this applet, </span></div>
<div style="position:absolute;top:687;left:90"><span class="ft1">you'll see a screen similar to Figure 11.5.</span></div>
<div style="position:absolute;top:684;left:342"><span class="ft0"> </span></div>
<div style="position:absolute;top:677;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:687;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:706;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:812;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:906;left:381"><span class="ft0">  </span></div>
<div style="position:absolute;top:812;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:906;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:925;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:941;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:941;left:136"><span class="ft7"> Figure 11.5:  The Hash Workshop applet</span></div>
<div style="position:absolute;top:938;left:390"><span class="ft0"> </span></div>
<div style="position:absolute;top:941;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:964;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:962;left:136"><span class="ft8">  </span></div>
<div style="position:absolute;top:962;left:640"><span class="ft8">  </span></div>
<div style="position:absolute;top:964;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:983;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1013;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:999;left:90"><span class="ft1"> In this applet the range of keys runs from 0 to 999. The initial size of the array is 60. The </span></div>
<div style="position:absolute;top:1015;left:90"><span class="ft1">hash function has to squeeze the range of keys down to match the array size. It does this </span></div>
<div style="position:absolute;top:1031;left:90"><span class="ft1">with the modulo (</span></div>
<div style="position:absolute;top:1031;left:196"><span class="ft9">%</span></div>
<div style="position:absolute;top:1031;left:204"><span class="ft1">) operator, as we've seen before:</span></div>
<div style="position:absolute;top:1028;left:407"><span class="ft0"> </span></div>
<div style="position:absolute;top:1013;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1032;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1051;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1067;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1066;left:113"><span class="ft9"> arrayIndex = key % arraySize;</span></div>
<div style="position:absolute;top:1063;left:355"><span class="ft0"> </span></div>
<div style="position:absolute;top:1067;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1070;left:79"><span class="ft0"> </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>