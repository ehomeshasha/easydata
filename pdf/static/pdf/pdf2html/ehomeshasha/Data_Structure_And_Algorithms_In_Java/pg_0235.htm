<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0235</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft2{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#ffffff;}
.ft3{font-style:normal;font-weight:bold;font-size:13px;font-family:Arial;color:#010100;}
.ft4{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#008000;}
.ft5{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#000000;}
.ft6{font-style:normal;font-weight:bold;font-size:16px;font-family:Verdana;color:#000000;}
.ft7{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#000080;}
.ft8{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#010100;}
.ft9{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0235.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:391"><span class="ft0"> - 235 -</span></div>
<div style="position:absolute;top:81;left:96"><span class="ft1">comparisons(N/2)</span></div>
<div style="position:absolute;top:78;left:206"><span class="ft0"> </span></div>
<div style="position:absolute;top:81;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:100;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:115;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:119;left:91"><span class="ft2">  </span></div>
<div style="position:absolute;top:122;left:90"><span class="ft3"> </span></div>
<div style="position:absolute;top:115;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:119;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:138;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:160;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:154;left:90"><span class="ft1"> For each merge, the maximum number of comparisons is one less than the number of </span></div>
<div style="position:absolute;top:170;left:90"><span class="ft1">items. Adding these figures for all the merges gives us a total of 17.</span></div>
<div style="position:absolute;top:167;left:504"><span class="ft0"> </span></div>
<div style="position:absolute;top:160;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:170;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:189;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:235;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:205;left:90"><span class="ft1"> The minimum number of comparisons is always half the number of items being merged, </span></div>
<div style="position:absolute;top:221;left:90"><span class="ft1">and adding these figures for all the merges results in 12 comparisons. Similar arithmetic </span></div>
<div style="position:absolute;top:237;left:90"><span class="ft1">results in the Comparisons columns for </span></div>
<div style="position:absolute;top:237;left:334"><span class="ft4">Table 6.4</span></div>
<div style="position:absolute;top:237;left:392"><span class="ft5">. The actual number of comparisons to </span></div>
<div style="position:absolute;top:253;left:90"><span class="ft5">sort a specific array depends on how the data is arranged; but it will be somewhere </span></div>
<div style="position:absolute;top:269;left:90"><span class="ft5">between the maximum and minimum values.</span></div>
<div style="position:absolute;top:266;left:365"><span class="ft0"> </span></div>
<div style="position:absolute;top:269;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:286;left:79"><span class="ft6"> </span></div>
<div style="position:absolute;top:305;left:79"><span class="ft7">Eliminating Recursion</span></div>
<div style="position:absolute;top:307;left:277"><span class="ft0"> </span></div>
<div style="position:absolute;top:306;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:311;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:330;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:368;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:346;left:90"><span class="ft1"> Some algorithms lend themselves to a recursive approach, some don't. As we've seen, </span></div>
<div style="position:absolute;top:362;left:90"><span class="ft1">the recursive </span></div>
<div style="position:absolute;top:362;left:174"><span class="ft8">triangle()</span></div>
<div style="position:absolute;top:362;left:257"><span class="ft1"> and </span></div>
<div style="position:absolute;top:362;left:288"><span class="ft8">factorial()</span></div>
<div style="position:absolute;top:362;left:379"><span class="ft1"> methods can be implemented more </span></div>
<div style="position:absolute;top:379;left:90"><span class="ft1">efficiently using a simple loop. However, various divide-and-conquer algorithms, such as </span></div>
<div style="position:absolute;top:395;left:90"><span class="ft1">mergesort, work very well as a recursive routine.</span></div>
<div style="position:absolute;top:392;left:388"><span class="ft0"> </span></div>
<div style="position:absolute;top:368;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:395;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:414;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:452;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:430;left:90"><span class="ft1"> Often an algorithm is easy to conceptualize as a recursive method, but in practice the </span></div>
<div style="position:absolute;top:446;left:90"><span class="ft1">recursive approach proves to be inefficient. In such cases, it's useful to transform the </span></div>
<div style="position:absolute;top:462;left:90"><span class="ft1">recursive approach into a nonrecursive approach. Such a transformation can often make </span></div>
<div style="position:absolute;top:478;left:90"><span class="ft1">use of a stack.</span></div>
<div style="position:absolute;top:475;left:180"><span class="ft0"> </span></div>
<div style="position:absolute;top:452;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:478;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:497;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:514;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:513;left:90"><span class="ft9"> Recursion and Stacks</span></div>
<div style="position:absolute;top:515;left:286"><span class="ft0"> </span></div>
<div style="position:absolute;top:514;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:519;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:538;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:592;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:554;left:90"><span class="ft1"> There is a close relationship between recursion and stacks. In fact, most compilers </span></div>
<div style="position:absolute;top:570;left:90"><span class="ft1">implement recursion by using stacks. As we noted, when a method is called, they push </span></div>
<div style="position:absolute;top:586;left:90"><span class="ft1">the arguments to the method and the return address (where control will go when the </span></div>
<div style="position:absolute;top:602;left:90"><span class="ft1">method returns) on the stack, and then transfer control to the method. When the method </span></div>
<div style="position:absolute;top:618;left:90"><span class="ft1">returns, they pop these values off the stack. The arguments disappear, and control </span></div>
<div style="position:absolute;top:634;left:90"><span class="ft1">returns to the return address.</span></div>
<div style="position:absolute;top:631;left:269"><span class="ft0"> </span></div>
<div style="position:absolute;top:592;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:634;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:653;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:670;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:669;left:90"><span class="ft9"> Simulating a Recursive Method</span></div>
<div style="position:absolute;top:671;left:368"><span class="ft0"> </span></div>
<div style="position:absolute;top:670;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:675;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:694;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:724;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:710;left:90"><span class="ft1"> In this section we'll demonstrate how any recursive solution can be transformed into a </span></div>
<div style="position:absolute;top:726;left:90"><span class="ft1">stack-based solution. Remember the recursive </span></div>
<div style="position:absolute;top:726;left:381"><span class="ft8">triangle()</span></div>
<div style="position:absolute;top:726;left:464"><span class="ft1"> method from the first </span></div>
<div style="position:absolute;top:743;left:90"><span class="ft1">section in this chapter. Here it is again:</span></div>
<div style="position:absolute;top:740;left:333"><span class="ft0"> </span></div>
<div style="position:absolute;top:724;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:743;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:762;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:778;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:777;left:113"><span class="ft8"> int triangle(int n)</span></div>
<div style="position:absolute;top:774;left:272"><span class="ft0"> </span></div>
<div style="position:absolute;top:778;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:781;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:797;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:796;left:113"><span class="ft8">    {</span></div>
<div style="position:absolute;top:793;left:147"><span class="ft0"> </span></div>
<div style="position:absolute;top:797;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:801;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:816;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:815;left:113"><span class="ft8">    if(n==1)</span></div>
<div style="position:absolute;top:812;left:205"><span class="ft0"> </span></div>
<div style="position:absolute;top:816;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:820;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:835;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:835;left:113"><span class="ft8">       return 1;</span></div>
<div style="position:absolute;top:832;left:238"><span class="ft0"> </span></div>
<div style="position:absolute;top:835;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:839;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:854;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:854;left:113"><span class="ft8">    else</span></div>
<div style="position:absolute;top:851;left:172"><span class="ft0"> </span></div>
<div style="position:absolute;top:854;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:858;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:873;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:873;left:113"><span class="ft8">       return( n + triangle(n-1) );</span></div>
<div style="position:absolute;top:870;left:396"><span class="ft0"> </span></div>
<div style="position:absolute;top:873;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:877;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:896;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:912;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:911;left:113"><span class="ft8">    }</span></div>
<div style="position:absolute;top:908;left:147"><span class="ft0"> </span></div>
<div style="position:absolute;top:912;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:916;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:935;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:974;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:951;left:90"><span class="ft1"> We're going to break this algorithm down into its individual operations, making each </span></div>
<div style="position:absolute;top:967;left:90"><span class="ft1">operation one </span></div>
<div style="position:absolute;top:967;left:179"><span class="ft8">case</span></div>
<div style="position:absolute;top:967;left:212"><span class="ft1"> in a </span></div>
<div style="position:absolute;top:967;left:242"><span class="ft8">switch</span></div>
<div style="position:absolute;top:967;left:292"><span class="ft1"> statement. (You can perform a similar decomposition </span></div>
<div style="position:absolute;top:984;left:90"><span class="ft1">using </span></div>
<div style="position:absolute;top:984;left:127"><span class="ft8">goto</span></div>
<div style="position:absolute;top:984;left:161"><span class="ft1"> statements in C++ and some other languages, but Java doesn't support </span></div>
<div style="position:absolute;top:1001;left:90"><span class="ft8">goto</span></div>
<div style="position:absolute;top:1001;left:124"><span class="ft1">.)</span></div>
<div style="position:absolute;top:998;left:132"><span class="ft0"> </span></div>
<div style="position:absolute;top:974;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1002;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1021;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1052;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1038;left:90"><span class="ft1"> The </span></div>
<div style="position:absolute;top:1038;left:118"><span class="ft8">switch</span></div>
<div style="position:absolute;top:1038;left:168"><span class="ft1"> statement is enclosed in a method called </span></div>
<div style="position:absolute;top:1038;left:427"><span class="ft8">step()</span></div>
<div style="position:absolute;top:1038;left:477"><span class="ft1">. Each call to </span></div>
<div style="position:absolute;top:1038;left:560"><span class="ft8">step()</span></div>
<div style="position:absolute;top:1038;left:610"><span class="ft1"> </span></div>
<div style="position:absolute;top:1055;left:90"><span class="ft1">causes one </span></div>
<div style="position:absolute;top:1055;left:165"><span class="ft8">case</span></div>
<div style="position:absolute;top:1055;left:198"><span class="ft1"> section within the </span></div>
<div style="position:absolute;top:1055;left:313"><span class="ft8">switch</span></div>
<div style="position:absolute;top:1055;left:363"><span class="ft1"> to be executed. Calling </span></div>
<div style="position:absolute;top:1055;left:512"><span class="ft8">step()</span></div>
<div style="position:absolute;top:1055;left:562"><span class="ft1"> repeatedly </span></div>
<div style="position:absolute;top:1072;left:90"><span class="ft1">will eventually execute all the code in the algorithm.</span></div>
<div style="position:absolute;top:1069;left:406"><span class="ft0"> </span></div>
<div style="position:absolute;top:1052;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1072;left:79"><span class="ft0"> </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>