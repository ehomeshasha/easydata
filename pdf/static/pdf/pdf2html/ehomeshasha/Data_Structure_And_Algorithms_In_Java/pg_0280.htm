<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0280</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft2{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#000000;}
.ft3{font-style:normal;font-weight:bold;font-size:16px;font-family:Verdana;color:#000000;}
.ft4{font-style:normal;font-weight:bold;font-size:25px;font-family:Arial;color:#000000;}
.ft5{font-style:normal;font-weight:bold;font-size:25px;font-family:Arial;color:#800000;}
.ft6{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#000080;}
.ft7{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#ff0000;}
.ft8{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#008000;}
.ft9{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
.ft10{font-style:italic;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0280.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:391"><span class="ft0"> - 280 -</span></div>
<div style="position:absolute;top:80;left:79"><span class="ft0">  </span></div>
<div style="position:absolute;top:81;left:90"><span class="ft1"> .</span></div>
<div style="position:absolute;top:78;left:95"><span class="ft0">   </span></div>
<div style="position:absolute;top:81;left:107"><span class="ft2">The insertion sort is commonly used to sort subarrays smaller than the cutoff.</span></div>
<div style="position:absolute;top:78;left:581"><span class="ft0"> </span></div>
<div style="position:absolute;top:80;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:84;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:103;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:125;left:79"><span class="ft0">  </span></div>
<div style="position:absolute;top:119;left:90"><span class="ft1"> .</span></div>
<div style="position:absolute;top:116;left:95"><span class="ft0">   </span></div>
<div style="position:absolute;top:119;left:107"><span class="ft2">The insertion sort can also be applied to the entire array, after it has been sorted down </span></div>
<div style="position:absolute;top:135;left:107"><span class="ft2">to a cutoff point by quicksort.</span></div>
<div style="position:absolute;top:132;left:284"><span class="ft0"> </span></div>
<div style="position:absolute;top:135;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:152;left:79"><span class="ft3"> </span></div>
<div style="position:absolute;top:175;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:170;left:90"><span class="ft4"> Chapter 8:  </span></div>
<div style="position:absolute;top:170;left:228"><span class="ft5">Binary Trees</span></div>
<div style="position:absolute;top:179;left:379"><span class="ft0"> </span></div>
<div style="position:absolute;top:175;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:184;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:203;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:220;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:219;left:90"><span class="ft6"> Overview</span></div>
<div style="position:absolute;top:221;left:174"><span class="ft0"> </span></div>
<div style="position:absolute;top:220;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:225;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:244;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:290;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:260;left:90"><span class="ft1"> In this chapter we switch from algorithms, the focus of the</span></div>
<div style="position:absolute;top:260;left:444"><span class="ft7"> </span></div>
<div style="position:absolute;top:260;left:448"><span class="ft8">last chapter </span></div>
<div style="position:absolute;top:260;left:523"><span class="ft2">on sorting, to data </span></div>
<div style="position:absolute;top:276;left:90"><span class="ft2">structures. Binary trees are one of the fundamental data storage structures used in </span></div>
<div style="position:absolute;top:292;left:90"><span class="ft2">programming. They provide advantages that the data structures we've seen so far cannot. </span></div>
<div style="position:absolute;top:308;left:90"><span class="ft2">In this chapter we'll learn why you would want to use trees, how they work, and how to go </span></div>
<div style="position:absolute;top:324;left:90"><span class="ft2">about creating them.</span></div>
<div style="position:absolute;top:321;left:217"><span class="ft0"> </span></div>
<div style="position:absolute;top:324;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:341;left:79"><span class="ft3"> </span></div>
<div style="position:absolute;top:360;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:359;left:90"><span class="ft6"> Why Use Binary Trees.</span></div>
<div style="position:absolute;top:361;left:300"><span class="ft0"> </span></div>
<div style="position:absolute;top:360;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:366;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:385;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:422;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:401;left:90"><span class="ft1"> Why might you want to use a tree. Usually, bec ause it combines the advantages of two </span></div>
<div style="position:absolute;top:417;left:90"><span class="ft1">other structures: an ordered array and a linked list. You can search a tree quickly, as you </span></div>
<div style="position:absolute;top:432;left:90"><span class="ft1">can an ordered array, and you can also insert and delete items quickly, as you can with a </span></div>
<div style="position:absolute;top:448;left:90"><span class="ft1">linked list. Let's explore these topics a bit before delving into the details of trees.</span></div>
<div style="position:absolute;top:445;left:580"><span class="ft0"> </span></div>
<div style="position:absolute;top:422;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:449;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:468;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:484;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:483;left:90"><span class="ft9"> Slow Insertion in an Ordered Array</span></div>
<div style="position:absolute;top:485;left:400"><span class="ft0"> </span></div>
<div style="position:absolute;top:484;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:489;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:508;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:570;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:524;left:90"><span class="ft1"> Imagine an array in which all the elements are arranged in order; that is, an ordered </span></div>
<div style="position:absolute;top:540;left:90"><span class="ft1">array, such as we saw in</span></div>
<div style="position:absolute;top:540;left:242"><span class="ft8"> Chapter 3, &quot;Simple Sorting</span></div>
<div style="position:absolute;top:540;left:410"><span class="ft2">.&quot; As we learned, it's quick to search </span></div>
<div style="position:absolute;top:556;left:90"><span class="ft2">such an array for a particular value, using a binary search. You check in the center of the </span></div>
<div style="position:absolute;top:572;left:90"><span class="ft2">array; if the object you're looking for is greater than what you find there, you narrow your </span></div>
<div style="position:absolute;top:588;left:90"><span class="ft2">search to the top half of the array; if it's less, you narrow your search to the bottom half. </span></div>
<div style="position:absolute;top:604;left:90"><span class="ft2">Applying this process repeatedly finds the object in O(logN) time. It's also quick to iterate </span></div>
<div style="position:absolute;top:620;left:90"><span class="ft2">through an ordered array, visiting each object in sorted order.</span></div>
<div style="position:absolute;top:617;left:466"><span class="ft0"> </span></div>
<div style="position:absolute;top:570;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:620;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:639;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:685;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:655;left:90"><span class="ft1"> On the other hand, if you want to insert a new object into an ordered array, you first need </span></div>
<div style="position:absolute;top:671;left:90"><span class="ft1">to find where the object will go, and then move all the objects with greater keys up one </span></div>
<div style="position:absolute;top:687;left:90"><span class="ft1">space in the array to make room for it. These multiple moves are time consuming, </span></div>
<div style="position:absolute;top:703;left:90"><span class="ft1">requiring, on the average, moving half the items (N/2 moves). Deletion involves the same </span></div>
<div style="position:absolute;top:719;left:90"><span class="ft1">multimove operation, and is thus equally slow.</span></div>
<div style="position:absolute;top:716;left:374"><span class="ft0"> </span></div>
<div style="position:absolute;top:685;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:719;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:738;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:760;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:754;left:90"><span class="ft1"> If you're going to be doing a lot of insertions and deletions, an ordered array is a bad </span></div>
<div style="position:absolute;top:770;left:90"><span class="ft1">choice.</span></div>
<div style="position:absolute;top:767;left:134"><span class="ft0"> </span></div>
<div style="position:absolute;top:760;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:770;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:789;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:806;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:805;left:90"><span class="ft9"> Slow Searching in a Linked List</span></div>
<div style="position:absolute;top:807;left:371"><span class="ft0"> </span></div>
<div style="position:absolute;top:806;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:811;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:830;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:860;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:846;left:90"><span class="ft1"> On the other hand, as we saw in </span></div>
<div style="position:absolute;top:846;left:293"><span class="ft8">Chapter 7, &quot;Advanced Sorting</span></div>
<div style="position:absolute;top:846;left:477"><span class="ft2">,&quot; insertions and deletions </span></div>
<div style="position:absolute;top:862;left:90"><span class="ft2">are quick to perform on a linked list. They are accomplished simply by changing a few </span></div>
<div style="position:absolute;top:878;left:90"><span class="ft2">references. These operations require O(1) time (the fastest Big-O time).</span></div>
<div style="position:absolute;top:875;left:530"><span class="ft0"> </span></div>
<div style="position:absolute;top:860;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:878;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:897;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:943;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:913;left:90"><span class="ft1"> Unfortunately, however, finding a specified element in a linked list is not so easy. You </span></div>
<div style="position:absolute;top:929;left:90"><span class="ft1">must start at the beginning of the list and visit each element until you find the one you're </span></div>
<div style="position:absolute;top:945;left:90"><span class="ft1">looking for. Thus you will need to visit an average of N/2 objects, comparing each one's </span></div>
<div style="position:absolute;top:961;left:90"><span class="ft1">key with the desired value. This is slow, requiring O(N) time. (Notice that times </span></div>
<div style="position:absolute;top:977;left:90"><span class="ft1">considered fast for a sort are slow for data structure operations.)</span></div>
<div style="position:absolute;top:974;left:485"><span class="ft0"> </span></div>
<div style="position:absolute;top:943;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:977;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:996;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1042;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1012;left:90"><span class="ft1"> You might think you could speed things up by using an ordered linked list, in which the </span></div>
<div style="position:absolute;top:1028;left:90"><span class="ft1">elements were arranged in order, but this doesn't help. You still must start at the </span></div>
<div style="position:absolute;top:1044;left:90"><span class="ft1">beginning and visit the elements in order, because there's no way to access a given </span></div>
<div style="position:absolute;top:1060;left:90"><span class="ft1">element without following the chain of references to it. (Of course, in an ordered list it's </span></div>
<div style="position:absolute;top:1076;left:90"><span class="ft1">much quicker to visit the nodes in order than it is in a non-ordered list, but that doesn't </span></div>
<div style="position:absolute;top:1042;left:640"><span class="ft0">  </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>