<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0513</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft2{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0513.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:391"><span class="ft0"> - 513 -</span></div>
<div style="position:absolute;top:94;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:81;left:90"><span class="ft1"> Insertion is fast in an unordered list. Searching and deletion are slow (although deletion is </span></div>
<div style="position:absolute;top:97;left:90"><span class="ft1">faster than in an array), so, like arrays, linked lists are best used when the amount of data </span></div>
<div style="position:absolute;top:112;left:90"><span class="ft1">is comparatively small.</span></div>
<div style="position:absolute;top:109;left:230"><span class="ft0"> </span></div>
<div style="position:absolute;top:94;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:113;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:132;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:153;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:148;left:90"><span class="ft1"> A linked list is somewhat more complicated to program than an array, but is simple </span></div>
<div style="position:absolute;top:164;left:90"><span class="ft1">compared with a tree or hash table.</span></div>
<div style="position:absolute;top:161;left:308"><span class="ft0"> </span></div>
<div style="position:absolute;top:153;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:164;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:183;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:199;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:198;left:90"><span class="ft2"> Binary Search Trees</span></div>
<div style="position:absolute;top:200;left:272"><span class="ft0"> </span></div>
<div style="position:absolute;top:199;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:204;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:224;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:261;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:239;left:90"><span class="ft1"> A binary tree is the first structure to consider when arrays and linked lists prove too slow. </span></div>
<div style="position:absolute;top:255;left:90"><span class="ft1">A tree provides fast O(logN) insertion, searching, and deletion. Traversal is O(N), which </span></div>
<div style="position:absolute;top:271;left:90"><span class="ft1">is the maximum for any data structure (by definition, you must visit every item). You can </span></div>
<div style="position:absolute;top:287;left:90"><span class="ft1">also find the minimum and maximum quickly, and traverse a range of items.</span></div>
<div style="position:absolute;top:284;left:555"><span class="ft0"> </span></div>
<div style="position:absolute;top:261;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:288;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:307;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:344;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:322;left:90"><span class="ft1"> An unbalanced binary tree is much easier to program than a balanced tree, but </span></div>
<div style="position:absolute;top:338;left:90"><span class="ft1">unfortunately, ordered data can reduce its performance to O(N) time, no better than a </span></div>
<div style="position:absolute;top:354;left:90"><span class="ft1">linked list. However, if you're sure the data will arrive in random order, there's no point </span></div>
<div style="position:absolute;top:370;left:90"><span class="ft1">using a balanced tree.</span></div>
<div style="position:absolute;top:367;left:227"><span class="ft0"> </span></div>
<div style="position:absolute;top:344;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:371;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:390;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:406;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:405;left:90"><span class="ft2"> Balanced Trees</span></div>
<div style="position:absolute;top:407;left:229"><span class="ft0"> </span></div>
<div style="position:absolute;top:406;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:411;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:430;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:476;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:446;left:90"><span class="ft1"> Of the various kinds of balanced trees, we discussed red-black trees and 2-3-4 trees. </span></div>
<div style="position:absolute;top:462;left:90"><span class="ft1">They are both balanced trees, and thus guarantee O(logN) performance whether the </span></div>
<div style="position:absolute;top:478;left:90"><span class="ft1">input data is ordered or not. However, these balanced trees are challenging to program, </span></div>
<div style="position:absolute;top:494;left:90"><span class="ft1">with the red-black tree being the more difficult. They also impose additional memory </span></div>
<div style="position:absolute;top:510;left:90"><span class="ft1">overhead, which may or may not be significant.</span></div>
<div style="position:absolute;top:507;left:380"><span class="ft0"> </span></div>
<div style="position:absolute;top:476;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:510;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:529;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:559;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:545;left:90"><span class="ft1"> The problem of complex programming may be reduced if a commercial class can be </span></div>
<div style="position:absolute;top:561;left:90"><span class="ft1">used for a tree. In some cases a hash table may be a better choice than a balanced tree. </span></div>
<div style="position:absolute;top:577;left:90"><span class="ft1">Hash-table performance doesn't degrade when the data is ordered.</span></div>
<div style="position:absolute;top:574;left:503"><span class="ft0"> </span></div>
<div style="position:absolute;top:559;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:577;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:596;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:618;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:612;left:90"><span class="ft1"> There are other kinds of balanced trees, including AVL trees, splay trees, 2-3 trees, and </span></div>
<div style="position:absolute;top:628;left:90"><span class="ft1">so on, but they are not as commonly used as the red-black tree.</span></div>
<div style="position:absolute;top:625;left:482"><span class="ft0"> </span></div>
<div style="position:absolute;top:618;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:628;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:648;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:664;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:663;left:90"><span class="ft2"> Hash Tables</span></div>
<div style="position:absolute;top:665;left:201"><span class="ft0"> </span></div>
<div style="position:absolute;top:664;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:669;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:688;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:734;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:704;left:90"><span class="ft1"> Hash tables are the fastest data storage structure. This makes them a necessity for </span></div>
<div style="position:absolute;top:720;left:90"><span class="ft1">situations in which a computer program, rather than a human, is interacting with the data. </span></div>
<div style="position:absolute;top:736;left:90"><span class="ft1">Hash tables are typically used in spelling checkers and as symbol tables in computer </span></div>
<div style="position:absolute;top:752;left:90"><span class="ft1">language compilers, where a program must check thousands of words or symbols in a </span></div>
<div style="position:absolute;top:768;left:90"><span class="ft1">fraction of a second.</span></div>
<div style="position:absolute;top:765;left:215"><span class="ft0"> </span></div>
<div style="position:absolute;top:734;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:768;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:787;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:825;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:803;left:90"><span class="ft1"> Hash tables may also be useful when a person, as opposed to a computer, initiates data-</span></div>
<div style="position:absolute;top:819;left:90"><span class="ft1">access operations. As noted above, hash tables are not sensitive to the order in which </span></div>
<div style="position:absolute;top:835;left:90"><span class="ft1">data is inserted, and so can take the place of a balanced tree. Programming is much </span></div>
<div style="position:absolute;top:851;left:90"><span class="ft1">simpler than for balanced trees.</span></div>
<div style="position:absolute;top:848;left:285"><span class="ft0"> </span></div>
<div style="position:absolute;top:825;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:851;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:870;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:900;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:886;left:90"><span class="ft1"> Hash tables require additional memory, especially for open addressing. Also, the amount </span></div>
<div style="position:absolute;top:902;left:90"><span class="ft1">of data to be stored must be known fairly accurately in advance, because an array is </span></div>
<div style="position:absolute;top:918;left:90"><span class="ft1">used as the underlying structure.</span></div>
<div style="position:absolute;top:915;left:292"><span class="ft0"> </span></div>
<div style="position:absolute;top:900;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:918;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:937;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:967;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:953;left:90"><span class="ft1"> A hash table with separate chaining is the most robust implementation unless the amount </span></div>
<div style="position:absolute;top:969;left:90"><span class="ft1">of data is known accurately in advance, in which case open addressing offers simpler </span></div>
<div style="position:absolute;top:985;left:90"><span class="ft1">programming because no linked list class is required.</span></div>
<div style="position:absolute;top:982;left:417"><span class="ft0"> </span></div>
<div style="position:absolute;top:967;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:985;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1005;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1034;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1020;left:90"><span class="ft1"> Hash tables don't support any kind of ordered traversal or access to the minimum or </span></div>
<div style="position:absolute;top:1036;left:90"><span class="ft1">maximum items. If these capabilities are important, the binary search tree is a better </span></div>
<div style="position:absolute;top:1052;left:90"><span class="ft1">choice.</span></div>
<div style="position:absolute;top:1049;left:134"><span class="ft0"> </span></div>
<div style="position:absolute;top:1034;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1053;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1072;left:80"><span class="ft0"> </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>