<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0020</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft2{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#010100;}
.ft3{font-style:normal;font-weight:bold;font-size:16px;font-family:Arial;color:#010100;}
.ft4{font-style:italic;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft5{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
.ft6{font-style:normal;font-weight:bold;font-size:16px;font-family:Verdana;color:#000000;}
.ft7{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#000080;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0020.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:395"><span class="ft0"> - 20 -</span></div>
<div style="position:absolute;top:95;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:81;left:90"><span class="ft1"> A constructor allows a new object to be initialized in a convenient way. Without the </span></div>
<div style="position:absolute;top:97;left:90"><span class="ft1">constructor in this program, you would have needed an additional call to </span></div>
<div style="position:absolute;top:97;left:536"><span class="ft2">deposit()</span></div>
<div style="position:absolute;top:97;left:611"><span class="ft1"> to </span></div>
<div style="position:absolute;top:114;left:90"><span class="ft1">put the opening balance in the account.</span></div>
<div style="position:absolute;top:111;left:333"><span class="ft0"> </span></div>
<div style="position:absolute;top:95;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:114;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:133;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:148;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:149;left:90"><span class="ft3"> Public and Private</span></div>
<div style="position:absolute;top:149;left:235"><span class="ft0"> </span></div>
<div style="position:absolute;top:148;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:152;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:171;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:219;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:188;left:90"><span class="ft1"> Notice the keywords </span></div>
<div style="position:absolute;top:188;left:219"><span class="ft2">public</span></div>
<div style="position:absolute;top:188;left:269"><span class="ft1"> and </span></div>
<div style="position:absolute;top:188;left:300"><span class="ft2">private</span></div>
<div style="position:absolute;top:188;left:358"><span class="ft1"> in the </span></div>
<div style="position:absolute;top:188;left:400"><span class="ft2">BankAccount</span></div>
<div style="position:absolute;top:188;left:492"><span class="ft1"> class. These keywords </span></div>
<div style="position:absolute;top:204;left:90"><span class="ft1">are access modifiers and determine what methods can access a method or field. The </span></div>
<div style="position:absolute;top:221;left:90"><span class="ft2">balance</span></div>
<div style="position:absolute;top:221;left:149"><span class="ft1"> field is preceded by </span></div>
<div style="position:absolute;top:221;left:276"><span class="ft2">private</span></div>
<div style="position:absolute;top:221;left:334"><span class="ft1">. A field or method that is private can only be </span></div>
<div style="position:absolute;top:238;left:90"><span class="ft1">accessed by methods that are part of the same class. Thus, </span></div>
<div style="position:absolute;top:238;left:462"><span class="ft2">balance</span></div>
<div style="position:absolute;top:238;left:520"><span class="ft1"> cannot be </span></div>
<div style="position:absolute;top:255;left:90"><span class="ft1">accessed by statements in </span></div>
<div style="position:absolute;top:255;left:258"><span class="ft2">main()</span></div>
<div style="position:absolute;top:255;left:308"><span class="ft1">, because </span></div>
<div style="position:absolute;top:255;left:372"><span class="ft2">main()</span></div>
<div style="position:absolute;top:255;left:422"><span class="ft1"> is not a method in </span></div>
<div style="position:absolute;top:255;left:539"><span class="ft2">BankAccount</span></div>
<div style="position:absolute;top:255;left:631"><span class="ft1">.</span></div>
<div style="position:absolute;top:252;left:635"><span class="ft0"> </span></div>
<div style="position:absolute;top:219;left:640"><span class="ft0"> </span></div>
<div style="position:absolute;top:256;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:275;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:307;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:292;left:90"><span class="ft1"> However, all the methods in </span></div>
<div style="position:absolute;top:292;left:265"><span class="ft2">BankAccount</span></div>
<div style="position:absolute;top:292;left:357"><span class="ft1"> have the access modifier </span></div>
<div style="position:absolute;top:292;left:519"><span class="ft2">public</span></div>
<div style="position:absolute;top:292;left:569"><span class="ft1">, so they </span></div>
<div style="position:absolute;top:309;left:90"><span class="ft1">can be accessed by methods in other classes. That's why statements in </span></div>
<div style="position:absolute;top:309;left:535"><span class="ft2">main()</span></div>
<div style="position:absolute;top:309;left:585"><span class="ft1"> can call </span></div>
<div style="position:absolute;top:326;left:90"><span class="ft2">deposit()</span></div>
<div style="position:absolute;top:326;left:165"><span class="ft1">, </span></div>
<div style="position:absolute;top:326;left:173"><span class="ft2">withdrawal()</span></div>
<div style="position:absolute;top:326;left:273"><span class="ft1">, and </span></div>
<div style="position:absolute;top:326;left:308"><span class="ft2">display()</span></div>
<div style="position:absolute;top:326;left:383"><span class="ft1">.</span></div>
<div style="position:absolute;top:323;left:387"><span class="ft0"> </span></div>
<div style="position:absolute;top:307;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:327;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:346;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:392;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:362;left:90"><span class="ft1"> Data fields in a class are typically made private and methods are made public. This </span></div>
<div style="position:absolute;top:378;left:90"><span class="ft1">protects the data; it can't be accidentally modified by methods of other classes. Any </span></div>
<div style="position:absolute;top:394;left:90"><span class="ft1">outside entity that needs to access data in a class must do so using a method of the </span></div>
<div style="position:absolute;top:410;left:90"><span class="ft1">same class. Data is like a queen bee, kept hidden in the middle of the hive, fed and cared </span></div>
<div style="position:absolute;top:426;left:90"><span class="ft1">for by worker-bee methods.</span></div>
<div style="position:absolute;top:423;left:259"><span class="ft0"> </span></div>
<div style="position:absolute;top:392;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:426;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:445;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:462;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:461;left:90"><span class="ft5"> Inheritance and Polymorphism</span></div>
<div style="position:absolute;top:463;left:364"><span class="ft0"> </span></div>
<div style="position:absolute;top:462;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:467;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:486;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:507;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:502;left:90"><span class="ft1"> We'll briefly mention two other key features of object-oriented programming: inheritance </span></div>
<div style="position:absolute;top:518;left:90"><span class="ft1">and polymorphism.</span></div>
<div style="position:absolute;top:515;left:208"><span class="ft0"> </span></div>
<div style="position:absolute;top:507;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:518;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:537;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:584;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:553;left:90"><span class="ft4"> Inheritance is the creation of one class, called the extended or derived class, from </span></div>
<div style="position:absolute;top:569;left:90"><span class="ft1">another class called the base class. The extended class has all the features of the base </span></div>
<div style="position:absolute;top:585;left:90"><span class="ft1">class, plus some additional features. For example, a </span></div>
<div style="position:absolute;top:585;left:414"><span class="ft2">secretary</span></div>
<div style="position:absolute;top:585;left:489"><span class="ft1"> class might be derived </span></div>
<div style="position:absolute;top:602;left:90"><span class="ft1">from a more general </span></div>
<div style="position:absolute;top:602;left:219"><span class="ft2">employee</span></div>
<div style="position:absolute;top:602;left:286"><span class="ft1"> class, and include a field called </span></div>
<div style="position:absolute;top:602;left:485"><span class="ft2">typingSpeed</span></div>
<div style="position:absolute;top:602;left:577"><span class="ft1"> that the </span></div>
<div style="position:absolute;top:620;left:90"><span class="ft2">employee</span></div>
<div style="position:absolute;top:620;left:157"><span class="ft1"> class lacked.</span></div>
<div style="position:absolute;top:617;left:240"><span class="ft0"> </span></div>
<div style="position:absolute;top:584;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:620;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:640;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:661;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:655;left:90"><span class="ft1"> In Java, inheritance is also called subclassing. The base class may be called the </span></div>
<div style="position:absolute;top:671;left:90"><span class="ft4">superclass, and the extended class may be called the subclass.</span></div>
<div style="position:absolute;top:668;left:482"><span class="ft0"> </span></div>
<div style="position:absolute;top:661;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:672;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:691;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:720;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:707;left:90"><span class="ft1"> Inheritance makes it easy to add features to an existing class and is an important aid in </span></div>
<div style="position:absolute;top:722;left:90"><span class="ft1">the design of programs with many related classes. Inheritance thus makes it easy to </span></div>
<div style="position:absolute;top:738;left:90"><span class="ft1">reuse classes for a slightly different purpose, a key benefit of OOP.</span></div>
<div style="position:absolute;top:735;left:502"><span class="ft0"> </span></div>
<div style="position:absolute;top:720;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:739;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:758;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:795;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:774;left:90"><span class="ft4"> Polymorphism involves treating objects of different classes in the same way. For </span></div>
<div style="position:absolute;top:790;left:90"><span class="ft1">polymorphism to work, these different classes must be derived from the same base class. </span></div>
<div style="position:absolute;top:806;left:90"><span class="ft1">In practice, polymorphism usually involves a method call that actually executes different </span></div>
<div style="position:absolute;top:822;left:90"><span class="ft1">methods for objects of different classes.</span></div>
<div style="position:absolute;top:819;left:335"><span class="ft0"> </span></div>
<div style="position:absolute;top:795;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:822;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:841;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:880;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:857;left:90"><span class="ft1"> For example, a call to </span></div>
<div style="position:absolute;top:857;left:227"><span class="ft2">display()</span></div>
<div style="position:absolute;top:857;left:302"><span class="ft1"> for a </span></div>
<div style="position:absolute;top:857;left:337"><span class="ft2">secretary</span></div>
<div style="position:absolute;top:857;left:412"><span class="ft1"> object would invoke a display </span></div>
<div style="position:absolute;top:874;left:90"><span class="ft1">method in the </span></div>
<div style="position:absolute;top:874;left:178"><span class="ft2">secretary</span></div>
<div style="position:absolute;top:874;left:253"><span class="ft1"> class, while the exact same call for a </span></div>
<div style="position:absolute;top:874;left:487"><span class="ft2">manager</span></div>
<div style="position:absolute;top:874;left:545"><span class="ft1"> object would </span></div>
<div style="position:absolute;top:892;left:90"><span class="ft1">invoke a different display method in the </span></div>
<div style="position:absolute;top:892;left:335"><span class="ft2">manager</span></div>
<div style="position:absolute;top:892;left:393"><span class="ft1"> class. Polymorphism simplifies and </span></div>
<div style="position:absolute;top:908;left:90"><span class="ft1">clarifies program design and coding.</span></div>
<div style="position:absolute;top:905;left:313"><span class="ft0"> </span></div>
<div style="position:absolute;top:880;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:908;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:927;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:973;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:943;left:90"><span class="ft1"> For those not familiar with them, inheritance and polymorphism involve significant </span></div>
<div style="position:absolute;top:959;left:90"><span class="ft1">additional complexity. To keep the focus on data structures and algorithms, we have </span></div>
<div style="position:absolute;top:975;left:90"><span class="ft1">avoided these features in our example programs. Inheritance and polymorphism are </span></div>
<div style="position:absolute;top:991;left:90"><span class="ft1">important and powerful aspects of OOP but are not necessary for the explanation of data </span></div>
<div style="position:absolute;top:1007;left:90"><span class="ft1">structures and algorithms.</span></div>
<div style="position:absolute;top:1004;left:250"><span class="ft0"> </span></div>
<div style="position:absolute;top:1007;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1024;left:79"><span class="ft6"> </span></div>
<div style="position:absolute;top:1044;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1043;left:90"><span class="ft7"> Software Engineering</span></div>
<div style="position:absolute;top:1045;left:283"><span class="ft0"> </span></div>
<div style="position:absolute;top:1044;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1049;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1068;left:80"><span class="ft0"> </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>