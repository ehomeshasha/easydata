<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0169</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft2{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#010100;}
.ft3{font-style:italic;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft4{font-style:normal;font-weight:bold;font-size:16px;font-family:Arial;color:#010100;}
.ft5{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0169.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:391"><span class="ft0"> - 169 -</span></div>
<div style="position:absolute;top:81;left:90"><span class="ft1">data types using classes. Some of these data types represent numerical quantities that </span></div>
<div style="position:absolute;top:97;left:90"><span class="ft1">are used in ways similar to primitive types. You can, for example, define a class for time </span></div>
<div style="position:absolute;top:112;left:90"><span class="ft1">(with fields for hours, minutes, seconds), a class for fractions (with numerator and </span></div>
<div style="position:absolute;top:128;left:90"><span class="ft1">denominator fields), and a class for extra-long numbers (characters in a string represent </span></div>
<div style="position:absolute;top:145;left:90"><span class="ft1">the digits). All these can be added and subtracted like </span></div>
<div style="position:absolute;top:145;left:424"><span class="ft2">int</span></div>
<div style="position:absolute;top:145;left:449"><span class="ft1"> and </span></div>
<div style="position:absolute;top:145;left:480"><span class="ft2">double</span></div>
<div style="position:absolute;top:145;left:530"><span class="ft1">, except that in </span></div>
<div style="position:absolute;top:162;left:90"><span class="ft1">Java you must use methods with functional notation like </span></div>
<div style="position:absolute;top:162;left:437"><span class="ft2">add()</span></div>
<div style="position:absolute;top:162;left:479"><span class="ft1"> and </span></div>
<div style="position:absolute;top:162;left:509"><span class="ft2">sub()</span></div>
<div style="position:absolute;top:162;left:551"><span class="ft1"> rather than </span></div>
<div style="position:absolute;top:179;left:90"><span class="ft1">operators like + and ¨C.</span></div>
<div style="position:absolute;top:176;left:228"><span class="ft0"> </span></div>
<div style="position:absolute;top:179;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:198;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:236;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:214;left:90"><span class="ft1"> The phrase &quot;data type&quot; seems to fit naturally with such quantity-oriented classes. </span></div>
<div style="position:absolute;top:230;left:90"><span class="ft1">However, it is also applied to classes that don't have this quantitative aspect. In fact, any </span></div>
<div style="position:absolute;top:246;left:90"><span class="ft1">class represents a data type, in the sense that a class comprises data (fields) and </span></div>
<div style="position:absolute;top:262;left:90"><span class="ft1">permissible operations on that data (methods).</span></div>
<div style="position:absolute;top:259;left:377"><span class="ft0"> </span></div>
<div style="position:absolute;top:236;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:262;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:281;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:319;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:297;left:90"><span class="ft1"> By extension, when a data storage structure like a stack or queue is represented by a </span></div>
<div style="position:absolute;top:313;left:90"><span class="ft1">class, it too can be referred to as a data type. A stack is different in many ways from an </span></div>
<div style="position:absolute;top:329;left:90"><span class="ft2">int</span></div>
<div style="position:absolute;top:329;left:115"><span class="ft1">, but they are both defined as a certain arrangement of data and a set of operations </span></div>
<div style="position:absolute;top:346;left:90"><span class="ft1">on that data.</span></div>
<div style="position:absolute;top:343;left:168"><span class="ft0"> </span></div>
<div style="position:absolute;top:319;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:346;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:365;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:381;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:381;left:90"><span class="ft4"> Abstraction</span></div>
<div style="position:absolute;top:381;left:183"><span class="ft0"> </span></div>
<div style="position:absolute;top:381;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:385;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:404;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:449;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:420;left:90"><span class="ft1"> The word abstract means &quot;considered apart from detailed specifications or </span></div>
<div style="position:absolute;top:436;left:90"><span class="ft1">implementation.&quot; An abstraction is the essence or important characteristics of something. </span></div>
<div style="position:absolute;top:452;left:90"><span class="ft1">The office of President, for example, is an abstraction, considered apart from the </span></div>
<div style="position:absolute;top:468;left:90"><span class="ft1">individual who happens to occupy that office. The powers and responsibilities of the office </span></div>
<div style="position:absolute;top:483;left:90"><span class="ft1">remain the same, while individual office-holders come and go.</span></div>
<div style="position:absolute;top:480;left:470"><span class="ft0"> </span></div>
<div style="position:absolute;top:449;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:484;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:503;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:556;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:519;left:90"><span class="ft1"> In object-oriented programming, then, an abstract data type is a class considered without </span></div>
<div style="position:absolute;top:535;left:90"><span class="ft1">regard to its implementation. It's a description of the data in the class (fields), a list of </span></div>
<div style="position:absolute;top:551;left:90"><span class="ft1">operations (methods) that can be carried out on that data, and instructions on how to use </span></div>
<div style="position:absolute;top:567;left:90"><span class="ft1">these operations. Specifically excluded are the details of how the methods carry out their </span></div>
<div style="position:absolute;top:583;left:90"><span class="ft1">tasks. As a class user, you're told what methods to call, how to call them, and the results </span></div>
<div style="position:absolute;top:598;left:90"><span class="ft1">you can expect, but not how they work.</span></div>
<div style="position:absolute;top:595;left:330"><span class="ft0"> </span></div>
<div style="position:absolute;top:556;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:599;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:618;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:663;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:634;left:90"><span class="ft1"> The meaning of abstract data type is further extended when it's applied to data structures </span></div>
<div style="position:absolute;top:650;left:90"><span class="ft1">like stacks and queues. As with any class, it means the data and the operations that can </span></div>
<div style="position:absolute;top:666;left:90"><span class="ft1">be performed on it, but in this context even the fundamentals of how the data is stored </span></div>
<div style="position:absolute;top:682;left:90"><span class="ft1">become invisible to the user. Users not only don't know how the methods work, they also </span></div>
<div style="position:absolute;top:698;left:90"><span class="ft1">don't know what structure is used to store the data.</span></div>
<div style="position:absolute;top:695;left:403"><span class="ft0"> </span></div>
<div style="position:absolute;top:663;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:698;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:717;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:756;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:733;left:90"><span class="ft1"> For the stack, the user knows that </span></div>
<div style="position:absolute;top:733;left:303"><span class="ft2">push()</span></div>
<div style="position:absolute;top:733;left:353"><span class="ft1"> and </span></div>
<div style="position:absolute;top:733;left:384"><span class="ft2">pop()</span></div>
<div style="position:absolute;top:733;left:425"><span class="ft1"> (and perhaps a few other </span></div>
<div style="position:absolute;top:750;left:90"><span class="ft1">methods) exist and how they work. The user doesn't (at least not usually) need to know </span></div>
<div style="position:absolute;top:766;left:90"><span class="ft1">how </span></div>
<div style="position:absolute;top:766;left:120"><span class="ft2">push()</span></div>
<div style="position:absolute;top:766;left:170"><span class="ft1"> and </span></div>
<div style="position:absolute;top:766;left:201"><span class="ft2">pop()</span></div>
<div style="position:absolute;top:766;left:242"><span class="ft1"> work, or whether data is stored in an array, a linked list, or some </span></div>
<div style="position:absolute;top:783;left:90"><span class="ft1">other data structure like a tree.</span></div>
<div style="position:absolute;top:780;left:279"><span class="ft0"> </span></div>
<div style="position:absolute;top:756;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:783;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:802;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:818;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:818;left:90"><span class="ft4"> The Interface</span></div>
<div style="position:absolute;top:818;left:194"><span class="ft0"> </span></div>
<div style="position:absolute;top:818;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:821;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:841;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:871;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:856;left:90"><span class="ft1"> An ADT specification is often called an interface. It's what the class user sees; usually its </span></div>
<div style="position:absolute;top:873;left:90"><span class="ft1">public methods. In a stack class, </span></div>
<div style="position:absolute;top:873;left:294"><span class="ft2">push()</span></div>
<div style="position:absolute;top:873;left:344"><span class="ft1"> and </span></div>
<div style="position:absolute;top:873;left:375"><span class="ft2">pop()</span></div>
<div style="position:absolute;top:873;left:417"><span class="ft1"> and similar methods form the </span></div>
<div style="position:absolute;top:890;left:90"><span class="ft1">interface.</span></div>
<div style="position:absolute;top:887;left:147"><span class="ft0"> </span></div>
<div style="position:absolute;top:871;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:890;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:909;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:925;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:924;left:90"><span class="ft5"> ADT Lists</span></div>
<div style="position:absolute;top:926;left:178"><span class="ft0"> </span></div>
<div style="position:absolute;top:925;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:931;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:950;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:995;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:966;left:90"><span class="ft1"> Now that we know what an abstract data type is, we can mention another one: the list. A </span></div>
<div style="position:absolute;top:981;left:90"><span class="ft1">list (sometimes called a linear list) is a group of items arranged in a linear order. That is, </span></div>
<div style="position:absolute;top:997;left:90"><span class="ft1">they're lined up in a certain way, like beads on a string or houses on a street. Lists </span></div>
<div style="position:absolute;top:1013;left:90"><span class="ft1">support certain fundamental operations. You can insert an item, delete an item, and </span></div>
<div style="position:absolute;top:1029;left:90"><span class="ft1">usually read an item from a specified location (the third item, say).</span></div>
<div style="position:absolute;top:1026;left:495"><span class="ft0"> </span></div>
<div style="position:absolute;top:995;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1030;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1049;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1064;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1065;left:90"><span class="ft1"> Don't confuse the ADT list with the linked list we've been discussing in this chapter. A list </span></div>
<div style="position:absolute;top:1064;left:640"><span class="ft0">  </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>