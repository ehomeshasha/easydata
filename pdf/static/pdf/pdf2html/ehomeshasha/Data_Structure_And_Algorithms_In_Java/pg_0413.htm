<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0413</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft2{font-style:normal;font-weight:bold;font-size:13px;font-family:Arial;color:#010100;}
.ft3{font-style:normal;font-weight:normal;font-size:13px;font-family:Times New Roman;color:#000000;}
.ft4{font-style:normal;font-weight:bold;font-size:16px;font-family:Arial;color:#010100;}
.ft5{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
.ft6{font-style:normal;font-weight:bold;font-size:16px;font-family:Verdana;color:#000000;}
.ft7{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#000080;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0413.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:391"><span class="ft0"> - 413 -</span></div>
<div style="position:absolute;top:80;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:81;left:90"><span class="ft1"> These formulas are graphed in Figure 11.14.</span></div>
<div style="position:absolute;top:78;left:365"><span class="ft0"> </span></div>
<div style="position:absolute;top:80;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:84;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:103;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:233;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:352;left:464"><span class="ft0">  </span></div>
<div style="position:absolute;top:233;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:352;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:371;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:387;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:387;left:136"><span class="ft2"> Figure 11.14:  Separate-chaining performance</span></div>
<div style="position:absolute;top:384;left:424"><span class="ft0"> </span></div>
<div style="position:absolute;top:387;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:409;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:408;left:136"><span class="ft3">  </span></div>
<div style="position:absolute;top:408;left:640"><span class="ft3">  </span></div>
<div style="position:absolute;top:410;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:429;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:450;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:445;left:90"><span class="ft1"> For an ordered list, only half the items must be examined in an unsuccessful search, so </span></div>
<div style="position:absolute;top:461;left:90"><span class="ft1">the time is the same as for a successful search.</span></div>
<div style="position:absolute;top:458;left:383"><span class="ft0"> </span></div>
<div style="position:absolute;top:450;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:461;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:480;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:517;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:496;left:90"><span class="ft1"> In separate chaining it's typical to use a load factor of about 1.0 (the number of data </span></div>
<div style="position:absolute;top:512;left:90"><span class="ft1">items equals the array size). Smaller load factors don't improve performance significantly, </span></div>
<div style="position:absolute;top:528;left:90"><span class="ft1">but the time for all operations increases linearly with load factor, so going beyond 2 or so </span></div>
<div style="position:absolute;top:544;left:90"><span class="ft1">is generally a bad idea.</span></div>
<div style="position:absolute;top:541;left:233"><span class="ft0"> </span></div>
<div style="position:absolute;top:517;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:544;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:563;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:578;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:578;left:90"><span class="ft4"> Insertion</span></div>
<div style="position:absolute;top:578;left:161"><span class="ft0"> </span></div>
<div style="position:absolute;top:578;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:582;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:601;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:631;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:617;left:90"><span class="ft1"> If the lists are not ordered, insertion is always immediate, in the sense that no </span></div>
<div style="position:absolute;top:633;left:90"><span class="ft1">comparisons are necessary. The hash function must still be computed, so let's call the </span></div>
<div style="position:absolute;top:649;left:90"><span class="ft1">insertion time 1.</span></div>
<div style="position:absolute;top:646;left:188"><span class="ft0"> </span></div>
<div style="position:absolute;top:631;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:649;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:668;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:690;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:684;left:90"><span class="ft1"> If the lists are ordered, then, as with an unsuccessful search, an average of half the items </span></div>
<div style="position:absolute;top:700;left:90"><span class="ft1">in each list must be examined, so the insertion time is 1 + loadFactor / 2.</span></div>
<div style="position:absolute;top:697;left:535"><span class="ft0"> </span></div>
<div style="position:absolute;top:690;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:700;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:719;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:736;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:735;left:90"><span class="ft5"> Open Addressing Versus Separate Chaining</span></div>
<div style="position:absolute;top:737;left:484"><span class="ft0"> </span></div>
<div style="position:absolute;top:736;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:741;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:760;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:806;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:776;left:90"><span class="ft1"> If open addressing is to be used, double hashing seems to be the preferred system by a </span></div>
<div style="position:absolute;top:792;left:90"><span class="ft1">small margin over quadratic probing. The exception is the situation where plenty of </span></div>
<div style="position:absolute;top:808;left:90"><span class="ft1">memory is available and the data won't expand after the table is created; in this case </span></div>
<div style="position:absolute;top:824;left:90"><span class="ft1">linear probing is somewhat simpler to implement and, if load factors below 0.5 are used, </span></div>
<div style="position:absolute;top:840;left:90"><span class="ft1">causes little performance penalty.</span></div>
<div style="position:absolute;top:837;left:297"><span class="ft0"> </span></div>
<div style="position:absolute;top:806;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:840;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:859;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:897;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:875;left:90"><span class="ft1"> If the number of items that will be inserted in a hash table isn't known when the table is </span></div>
<div style="position:absolute;top:891;left:90"><span class="ft1">created, separate chaining is preferable to open addressing. Increasing the load factor </span></div>
<div style="position:absolute;top:907;left:90"><span class="ft1">causes major performance penalties in open addressing, but performance degrades only </span></div>
<div style="position:absolute;top:923;left:90"><span class="ft1">linearly in separate chaining.</span></div>
<div style="position:absolute;top:920;left:266"><span class="ft0"> </span></div>
<div style="position:absolute;top:897;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:923;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:942;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:972;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:958;left:90"><span class="ft1"> When in doubt, use separate chaining. Its drawback is the need for a linked list class, but </span></div>
<div style="position:absolute;top:974;left:90"><span class="ft1">the payoff is that adding more data than you anticipated won't cause performance to slow </span></div>
<div style="position:absolute;top:990;left:90"><span class="ft1">to a crawl.</span></div>
<div style="position:absolute;top:987;left:154"><span class="ft0"> </span></div>
<div style="position:absolute;top:990;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1007;left:79"><span class="ft6"> </span></div>
<div style="position:absolute;top:1026;left:79"><span class="ft7">Hashing and External Storage</span></div>
<div style="position:absolute;top:1028;left:345"><span class="ft0"> </span></div>
<div style="position:absolute;top:1027;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1032;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1051;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1066;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1067;left:90"><span class="ft1"> At the end of the last chapter we discussed using B-trees as data structures for external </span></div>
<div style="position:absolute;top:1066;left:640"><span class="ft0">  </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>