<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.0 Transitional//EN">
<!-- saved from url=(0052)http://www.verypdf.com/ -->
<html>
<head>
<title>pg_0515</title>

<style>
<!-- 
select {font-size:12px;}
A:link {text-decoration: none; color: blue}
A:visited {text-decoration: none; color: purple}
A:active {text-decoration: red}
A:hover {text-decoration: underline; color:red}
-->
</style>
<script TYPE="text/javascript"> 
<!-- hide 
function killerrors()
{ 
return true; 
} 
window.onerror = killerrors; 
// --> 
</script>
<style type="text/css">
<!--
.ft0{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#000000;}
.ft1{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#010100;}
.ft2{font-style:normal;font-weight:normal;font-size:13px;font-family:Arial;color:#000000;}
.ft3{font-style:normal;font-weight:bold;font-size:18px;font-family:Arial;color:#800000;}
.ft4{font-style:normal;font-weight:bold;font-size:13px;font-family:Arial;color:#800000;}
.ft5{font-style:normal;font-weight:normal;font-size:16px;font-family:Times New Roman;color:#ffffff;}
.ft6{font-style:normal;font-weight:bold;font-size:13px;font-family:Arial;color:#010100;}
-->
</style>
</head>
<body vlink="#FFFFFF" link="#FFFFFF" bgcolor="#ffffff">

<script TYPE="text/javascript">
var currentpos,timer; 
function initialize() 
{ 
timer=setInterval("scrollwindow()",10);
} 
function sc(){
clearInterval(timer); 
}
function scrollwindow() 
{ 
currentpos=document.body.scrollTop; 
window.scroll(0,++currentpos); 
if (currentpos != document.body.scrollTop) 
sc();
} 
document.onmousedown=sc
document.ondblclick=initialize
</script>
<div style="position:absolute;top:0;left:0"><img width="826" height="1169" src="pg_0515.jpg" ALT=""></div>
<div style="position:absolute;top:1102;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1102;left:391"><span class="ft0"> - 515 -</span></div>
<div style="position:absolute;top:84;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:99;left:79"><span class="ft0">  </span></div>
<div style="position:absolute;top:100;left:90"><span class="ft1"> .</span></div>
<div style="position:absolute;top:97;left:95"><span class="ft0">   </span></div>
<div style="position:absolute;top:100;left:107"><span class="ft2">For priority queues: the item with the highest priority</span></div>
<div style="position:absolute;top:97;left:426"><span class="ft0"> </span></div>
<div style="position:absolute;top:99;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:103;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:122;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:152;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:138;left:90"><span class="ft1"> These ADTs can be seen as conceptual aids. Their functionality could be obtained using </span></div>
<div style="position:absolute;top:154;left:90"><span class="ft1">the underlying structure (such as an array) directly, but the reduced interface they offer </span></div>
<div style="position:absolute;top:170;left:90"><span class="ft1">simplifies many problems.</span></div>
<div style="position:absolute;top:167;left:250"><span class="ft0"> </span></div>
<div style="position:absolute;top:152;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:170;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:189;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:205;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:205;left:90"><span class="ft1"> These ADTs can't be conveniently searched for an item by key value or traversed.</span></div>
<div style="position:absolute;top:202;left:594"><span class="ft0">   </span></div>
<div style="position:absolute;top:208;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:228;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:244;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:243;left:90"><span class="ft3"> Stack</span></div>
<div style="position:absolute;top:245;left:140"><span class="ft0"> </span></div>
<div style="position:absolute;top:244;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:249;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:268;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:290;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:284;left:90"><span class="ft1"> A stack is used when you want access only to the last data item inserted; it's a last-in-</span></div>
<div style="position:absolute;top:300;left:90"><span class="ft1">first-out (LIFO) structure.</span></div>
<div style="position:absolute;top:297;left:242"><span class="ft0"> </span></div>
<div style="position:absolute;top:290;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:300;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:319;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:357;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:335;left:90"><span class="ft1"> A stack is often implemented as an array or a linked list. The array implementation is </span></div>
<div style="position:absolute;top:351;left:90"><span class="ft1">efficient because the most recently inserted item is placed at the end of the array, where </span></div>
<div style="position:absolute;top:367;left:90"><span class="ft1">it's also easy to delete it. Stack overflow can occur, but is not likely if the array is </span></div>
<div style="position:absolute;top:383;left:90"><span class="ft1">reasonably sized, because stacks seldom contain huge amounts of data.</span></div>
<div style="position:absolute;top:380;left:537"><span class="ft0"> </span></div>
<div style="position:absolute;top:357;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:383;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:402;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:464;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:418;left:90"><span class="ft1"> If the stack will contain a lot of data and the amount can't be predicted accurately in </span></div>
<div style="position:absolute;top:434;left:90"><span class="ft1">advance (as when recursion is implemented as a stack) a linked list is a better choice </span></div>
<div style="position:absolute;top:450;left:90"><span class="ft1">than an array. A linked list is efficient because items can be inserted and deleted quickly </span></div>
<div style="position:absolute;top:466;left:90"><span class="ft1">from the head of the list. Stack overflow can't occur (unless the entire memory is full). A </span></div>
<div style="position:absolute;top:482;left:90"><span class="ft1">linked list is slightly slower than an array because memory allocation is necessary to </span></div>
<div style="position:absolute;top:498;left:90"><span class="ft1">create a new link for insertion, and deallocation of the link is necessary at some point </span></div>
<div style="position:absolute;top:514;left:90"><span class="ft1">following removal of an item from the list.</span></div>
<div style="position:absolute;top:511;left:342"><span class="ft0"> </span></div>
<div style="position:absolute;top:464;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:514;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:533;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:550;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:549;left:90"><span class="ft3"> Queue</span></div>
<div style="position:absolute;top:551;left:149"><span class="ft0"> </span></div>
<div style="position:absolute;top:550;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:555;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:574;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:596;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:590;left:90"><span class="ft1"> A queue is used when you want access only to the first data item inserted; it's a first-in-</span></div>
<div style="position:absolute;top:606;left:90"><span class="ft1">first-out (FIFO) structure.</span></div>
<div style="position:absolute;top:603;left:243"><span class="ft0"> </span></div>
<div style="position:absolute;top:596;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:606;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:625;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:663;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:641;left:90"><span class="ft1"> Like stacks, queues can be implemented as arrays or linked lists. Both are efficient. The </span></div>
<div style="position:absolute;top:657;left:90"><span class="ft1">array requires additional programming to handle the situation in which the queue wraps </span></div>
<div style="position:absolute;top:673;left:90"><span class="ft1">around at the end of the array. A linked list must be double-ended, to allow insertions at </span></div>
<div style="position:absolute;top:689;left:90"><span class="ft1">one end and deletions at the other.</span></div>
<div style="position:absolute;top:686;left:305"><span class="ft0"> </span></div>
<div style="position:absolute;top:663;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:689;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:708;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:738;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:724;left:90"><span class="ft1"> As with stacks, the choice between an array implementation and a linked list </span></div>
<div style="position:absolute;top:740;left:90"><span class="ft1">implementation is determined by how well the amount of data can be predicted. Use the </span></div>
<div style="position:absolute;top:756;left:90"><span class="ft1">array if you know about how much data there will be; otherwise, use a linked list.</span></div>
<div style="position:absolute;top:753;left:584"><span class="ft0"> </span></div>
<div style="position:absolute;top:738;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:756;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:775;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:792;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:791;left:90"><span class="ft3"> Priority queue</span></div>
<div style="position:absolute;top:793;left:216"><span class="ft0"> </span></div>
<div style="position:absolute;top:792;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:797;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:816;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:838;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:832;left:90"><span class="ft1"> A priority queue is used when the only access desired is to the data item with the highest </span></div>
<div style="position:absolute;top:848;left:90"><span class="ft1">priority. This is the item with the largest (or sometimes the smallest) key.</span></div>
<div style="position:absolute;top:845;left:534"><span class="ft0"> </span></div>
<div style="position:absolute;top:838;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:848;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:867;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:897;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:883;left:90"><span class="ft1"> Priority queues can be implemented as an ordered array or as a heap. Insertion into an </span></div>
<div style="position:absolute;top:899;left:90"><span class="ft1">ordered array is slow, but deletion is fast. With the heap implementation, both insertion </span></div>
<div style="position:absolute;top:915;left:90"><span class="ft1">and deletion take O(logN) time.</span></div>
<div style="position:absolute;top:912;left:283"><span class="ft0"> </span></div>
<div style="position:absolute;top:897;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:915;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:934;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:964;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:950;left:90"><span class="ft1"> Use an array or a double-ended linked list if insertion speed is not a problem. The array </span></div>
<div style="position:absolute;top:966;left:90"><span class="ft1">works when the amount of data to be stored can be predicted in advance; the linked list </span></div>
<div style="position:absolute;top:982;left:90"><span class="ft1">when the amount of data is unknown. If speed is important, a heap is a better choice.</span></div>
<div style="position:absolute;top:979;left:612"><span class="ft0">   </span></div>
<div style="position:absolute;top:982;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1001;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1017;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1017;left:90"><span class="ft4"> Table 15.2: SPECIAL-PURPOSE DATA-STORAGE STRUCTURES</span></div>
<div style="position:absolute;top:1014;left:513"><span class="ft0"> </span></div>
<div style="position:absolute;top:1017;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1021;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1040;left:80"><span class="ft0"> </span></div>
<div style="position:absolute;top:1055;left:79"><span class="ft0"> </span></div>
<div style="position:absolute;top:1059;left:91"><span class="ft5">  </span></div>
<div style="position:absolute;top:1062;left:90"><span class="ft6"> </span></div>
<div style="position:absolute;top:1055;left:640"><span class="ft0">  </span></div>
<div style="position:absolute;top:1059;left:79"><span class="ft0"> </span></div>
<script TYPE="text/javascript">
			var currentZoom = parent.ltop.currentZoom;
			if(currentZoom != undefined)
				document.body.style.zoom=currentZoom/100;
			</script>
</body>
</html>